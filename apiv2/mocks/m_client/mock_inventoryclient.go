// Code generated by mockery v2.51.1. DO NOT EDIT.

package m_client

import (
	client "github.com/open-edge-platform/infra-core/inventory/v2/pkg/client"
	cache "github.com/open-edge-platform/infra-core/inventory/v2/pkg/client/cache"

	computev1 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/compute/v1"

	context "context"

	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	inventoryv1 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/inventory/v1"

	mock "github.com/stretchr/testify/mock"
)

// MockInventoryClient is an autogenerated mock type for the InventoryClient type
type MockInventoryClient struct {
	mock.Mock
}

type MockInventoryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInventoryClient) EXPECT() *MockInventoryClient_Expecter {
	return &MockInventoryClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockInventoryClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInventoryClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockInventoryClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockInventoryClient_Expecter) Close() *MockInventoryClient_Close_Call {
	return &MockInventoryClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockInventoryClient_Close_Call) Run(run func()) *MockInventoryClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInventoryClient_Close_Call) Return(_a0 error) *MockInventoryClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInventoryClient_Close_Call) RunAndReturn(run func() error) *MockInventoryClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, res
func (_m *MockInventoryClient) Create(ctx context.Context, res *inventoryv1.Resource) (*inventoryv1.Resource, error) {
	ret := _m.Called(ctx, res)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *inventoryv1.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.Resource) (*inventoryv1.Resource, error)); ok {
		return rf(ctx, res)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.Resource) *inventoryv1.Resource); ok {
		r0 = rf(ctx, res)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *inventoryv1.Resource) error); ok {
		r1 = rf(ctx, res)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInventoryClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockInventoryClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - res *inventoryv1.Resource
func (_e *MockInventoryClient_Expecter) Create(ctx interface{}, res interface{}) *MockInventoryClient_Create_Call {
	return &MockInventoryClient_Create_Call{Call: _e.mock.On("Create", ctx, res)}
}

func (_c *MockInventoryClient_Create_Call) Run(run func(ctx context.Context, res *inventoryv1.Resource)) *MockInventoryClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*inventoryv1.Resource))
	})
	return _c
}

func (_c *MockInventoryClient_Create_Call) Return(_a0 *inventoryv1.Resource, _a1 error) *MockInventoryClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInventoryClient_Create_Call) RunAndReturn(run func(context.Context, *inventoryv1.Resource) (*inventoryv1.Resource, error)) *MockInventoryClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockInventoryClient) Delete(ctx context.Context, id string) (*inventoryv1.DeleteResourceResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *inventoryv1.DeleteResourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*inventoryv1.DeleteResourceResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *inventoryv1.DeleteResourceResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.DeleteResourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInventoryClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockInventoryClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockInventoryClient_Expecter) Delete(ctx interface{}, id interface{}) *MockInventoryClient_Delete_Call {
	return &MockInventoryClient_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockInventoryClient_Delete_Call) Run(run func(ctx context.Context, id string)) *MockInventoryClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInventoryClient_Delete_Call) Return(_a0 *inventoryv1.DeleteResourceResponse, _a1 error) *MockInventoryClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInventoryClient_Delete_Call) RunAndReturn(run func(context.Context, string) (*inventoryv1.DeleteResourceResponse, error)) *MockInventoryClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: _a0, _a1
func (_m *MockInventoryClient) Find(_a0 context.Context, _a1 *inventoryv1.ResourceFilter) (*inventoryv1.FindResourcesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *inventoryv1.FindResourcesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) (*inventoryv1.FindResourcesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) *inventoryv1.FindResourcesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.FindResourcesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *inventoryv1.ResourceFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInventoryClient_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockInventoryClient_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *inventoryv1.ResourceFilter
func (_e *MockInventoryClient_Expecter) Find(_a0 interface{}, _a1 interface{}) *MockInventoryClient_Find_Call {
	return &MockInventoryClient_Find_Call{Call: _e.mock.On("Find", _a0, _a1)}
}

func (_c *MockInventoryClient_Find_Call) Run(run func(_a0 context.Context, _a1 *inventoryv1.ResourceFilter)) *MockInventoryClient_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*inventoryv1.ResourceFilter))
	})
	return _c
}

func (_c *MockInventoryClient_Find_Call) Return(_a0 *inventoryv1.FindResourcesResponse, _a1 error) *MockInventoryClient_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInventoryClient_Find_Call) RunAndReturn(run func(context.Context, *inventoryv1.ResourceFilter) (*inventoryv1.FindResourcesResponse, error)) *MockInventoryClient_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields: _a0, _a1
func (_m *MockInventoryClient) FindAll(_a0 context.Context, _a1 *inventoryv1.ResourceFilter) ([]*inventoryv1.FindResourcesResponse_ResourceTenantIDCarrier, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*inventoryv1.FindResourcesResponse_ResourceTenantIDCarrier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) ([]*inventoryv1.FindResourcesResponse_ResourceTenantIDCarrier, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) []*inventoryv1.FindResourcesResponse_ResourceTenantIDCarrier); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*inventoryv1.FindResourcesResponse_ResourceTenantIDCarrier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *inventoryv1.ResourceFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInventoryClient_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockInventoryClient_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *inventoryv1.ResourceFilter
func (_e *MockInventoryClient_Expecter) FindAll(_a0 interface{}, _a1 interface{}) *MockInventoryClient_FindAll_Call {
	return &MockInventoryClient_FindAll_Call{Call: _e.mock.On("FindAll", _a0, _a1)}
}

func (_c *MockInventoryClient_FindAll_Call) Run(run func(_a0 context.Context, _a1 *inventoryv1.ResourceFilter)) *MockInventoryClient_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*inventoryv1.ResourceFilter))
	})
	return _c
}

func (_c *MockInventoryClient_FindAll_Call) Return(_a0 []*inventoryv1.FindResourcesResponse_ResourceTenantIDCarrier, _a1 error) *MockInventoryClient_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInventoryClient_FindAll_Call) RunAndReturn(run func(context.Context, *inventoryv1.ResourceFilter) ([]*inventoryv1.FindResourcesResponse_ResourceTenantIDCarrier, error)) *MockInventoryClient_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockInventoryClient) Get(ctx context.Context, id string) (*inventoryv1.GetResourceResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *inventoryv1.GetResourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*inventoryv1.GetResourceResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *inventoryv1.GetResourceResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.GetResourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInventoryClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockInventoryClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockInventoryClient_Expecter) Get(ctx interface{}, id interface{}) *MockInventoryClient_Get_Call {
	return &MockInventoryClient_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockInventoryClient_Get_Call) Run(run func(ctx context.Context, id string)) *MockInventoryClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInventoryClient_Get_Call) Return(_a0 *inventoryv1.GetResourceResponse, _a1 error) *MockInventoryClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInventoryClient_Get_Call) RunAndReturn(run func(context.Context, string) (*inventoryv1.GetResourceResponse, error)) *MockInventoryClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetHostByUUID provides a mock function with given fields: ctx, uuid
func (_m *MockInventoryClient) GetHostByUUID(ctx context.Context, uuid string) (*computev1.HostResource, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetHostByUUID")
	}

	var r0 *computev1.HostResource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*computev1.HostResource, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *computev1.HostResource); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*computev1.HostResource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInventoryClient_GetHostByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHostByUUID'
type MockInventoryClient_GetHostByUUID_Call struct {
	*mock.Call
}

// GetHostByUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockInventoryClient_Expecter) GetHostByUUID(ctx interface{}, uuid interface{}) *MockInventoryClient_GetHostByUUID_Call {
	return &MockInventoryClient_GetHostByUUID_Call{Call: _e.mock.On("GetHostByUUID", ctx, uuid)}
}

func (_c *MockInventoryClient_GetHostByUUID_Call) Run(run func(ctx context.Context, uuid string)) *MockInventoryClient_GetHostByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInventoryClient_GetHostByUUID_Call) Return(_a0 *computev1.HostResource, _a1 error) *MockInventoryClient_GetHostByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInventoryClient_GetHostByUUID_Call) RunAndReturn(run func(context.Context, string) (*computev1.HostResource, error)) *MockInventoryClient_GetHostByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSitesPerRegion provides a mock function with given fields: _a0, _a1
func (_m *MockInventoryClient) GetSitesPerRegion(_a0 context.Context, _a1 *inventoryv1.GetSitesPerRegionRequest) (*inventoryv1.GetSitesPerRegionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSitesPerRegion")
	}

	var r0 *inventoryv1.GetSitesPerRegionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.GetSitesPerRegionRequest) (*inventoryv1.GetSitesPerRegionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.GetSitesPerRegionRequest) *inventoryv1.GetSitesPerRegionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.GetSitesPerRegionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *inventoryv1.GetSitesPerRegionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInventoryClient_GetSitesPerRegion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSitesPerRegion'
type MockInventoryClient_GetSitesPerRegion_Call struct {
	*mock.Call
}

// GetSitesPerRegion is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *inventoryv1.GetSitesPerRegionRequest
func (_e *MockInventoryClient_Expecter) GetSitesPerRegion(_a0 interface{}, _a1 interface{}) *MockInventoryClient_GetSitesPerRegion_Call {
	return &MockInventoryClient_GetSitesPerRegion_Call{Call: _e.mock.On("GetSitesPerRegion", _a0, _a1)}
}

func (_c *MockInventoryClient_GetSitesPerRegion_Call) Run(run func(_a0 context.Context, _a1 *inventoryv1.GetSitesPerRegionRequest)) *MockInventoryClient_GetSitesPerRegion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*inventoryv1.GetSitesPerRegionRequest))
	})
	return _c
}

func (_c *MockInventoryClient_GetSitesPerRegion_Call) Return(_a0 *inventoryv1.GetSitesPerRegionResponse, _a1 error) *MockInventoryClient_GetSitesPerRegion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInventoryClient_GetSitesPerRegion_Call) RunAndReturn(run func(context.Context, *inventoryv1.GetSitesPerRegionRequest) (*inventoryv1.GetSitesPerRegionResponse, error)) *MockInventoryClient_GetSitesPerRegion_Call {
	_c.Call.Return(run)
	return _c
}

// GetTenantAwareInventoryClient provides a mock function with no fields
func (_m *MockInventoryClient) GetTenantAwareInventoryClient() client.TenantAwareInventoryClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTenantAwareInventoryClient")
	}

	var r0 client.TenantAwareInventoryClient
	if rf, ok := ret.Get(0).(func() client.TenantAwareInventoryClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.TenantAwareInventoryClient)
		}
	}

	return r0
}

// MockInventoryClient_GetTenantAwareInventoryClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantAwareInventoryClient'
type MockInventoryClient_GetTenantAwareInventoryClient_Call struct {
	*mock.Call
}

// GetTenantAwareInventoryClient is a helper method to define mock.On call
func (_e *MockInventoryClient_Expecter) GetTenantAwareInventoryClient() *MockInventoryClient_GetTenantAwareInventoryClient_Call {
	return &MockInventoryClient_GetTenantAwareInventoryClient_Call{Call: _e.mock.On("GetTenantAwareInventoryClient")}
}

func (_c *MockInventoryClient_GetTenantAwareInventoryClient_Call) Run(run func()) *MockInventoryClient_GetTenantAwareInventoryClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInventoryClient_GetTenantAwareInventoryClient_Call) Return(_a0 client.TenantAwareInventoryClient) *MockInventoryClient_GetTenantAwareInventoryClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInventoryClient_GetTenantAwareInventoryClient_Call) RunAndReturn(run func() client.TenantAwareInventoryClient) *MockInventoryClient_GetTenantAwareInventoryClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetTreeHierarchy provides a mock function with given fields: _a0, _a1
func (_m *MockInventoryClient) GetTreeHierarchy(_a0 context.Context, _a1 *inventoryv1.GetTreeHierarchyRequest) ([]*inventoryv1.GetTreeHierarchyResponse_TreeNode, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTreeHierarchy")
	}

	var r0 []*inventoryv1.GetTreeHierarchyResponse_TreeNode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.GetTreeHierarchyRequest) ([]*inventoryv1.GetTreeHierarchyResponse_TreeNode, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.GetTreeHierarchyRequest) []*inventoryv1.GetTreeHierarchyResponse_TreeNode); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*inventoryv1.GetTreeHierarchyResponse_TreeNode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *inventoryv1.GetTreeHierarchyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInventoryClient_GetTreeHierarchy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTreeHierarchy'
type MockInventoryClient_GetTreeHierarchy_Call struct {
	*mock.Call
}

// GetTreeHierarchy is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *inventoryv1.GetTreeHierarchyRequest
func (_e *MockInventoryClient_Expecter) GetTreeHierarchy(_a0 interface{}, _a1 interface{}) *MockInventoryClient_GetTreeHierarchy_Call {
	return &MockInventoryClient_GetTreeHierarchy_Call{Call: _e.mock.On("GetTreeHierarchy", _a0, _a1)}
}

func (_c *MockInventoryClient_GetTreeHierarchy_Call) Run(run func(_a0 context.Context, _a1 *inventoryv1.GetTreeHierarchyRequest)) *MockInventoryClient_GetTreeHierarchy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*inventoryv1.GetTreeHierarchyRequest))
	})
	return _c
}

func (_c *MockInventoryClient_GetTreeHierarchy_Call) Return(_a0 []*inventoryv1.GetTreeHierarchyResponse_TreeNode, _a1 error) *MockInventoryClient_GetTreeHierarchy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInventoryClient_GetTreeHierarchy_Call) RunAndReturn(run func(context.Context, *inventoryv1.GetTreeHierarchyRequest) ([]*inventoryv1.GetTreeHierarchyResponse_TreeNode, error)) *MockInventoryClient_GetTreeHierarchy_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *MockInventoryClient) List(_a0 context.Context, _a1 *inventoryv1.ResourceFilter) (*inventoryv1.ListResourcesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *inventoryv1.ListResourcesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) (*inventoryv1.ListResourcesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) *inventoryv1.ListResourcesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.ListResourcesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *inventoryv1.ResourceFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInventoryClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockInventoryClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *inventoryv1.ResourceFilter
func (_e *MockInventoryClient_Expecter) List(_a0 interface{}, _a1 interface{}) *MockInventoryClient_List_Call {
	return &MockInventoryClient_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *MockInventoryClient_List_Call) Run(run func(_a0 context.Context, _a1 *inventoryv1.ResourceFilter)) *MockInventoryClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*inventoryv1.ResourceFilter))
	})
	return _c
}

func (_c *MockInventoryClient_List_Call) Return(_a0 *inventoryv1.ListResourcesResponse, _a1 error) *MockInventoryClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInventoryClient_List_Call) RunAndReturn(run func(context.Context, *inventoryv1.ResourceFilter) (*inventoryv1.ListResourcesResponse, error)) *MockInventoryClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: _a0, _a1
func (_m *MockInventoryClient) ListAll(_a0 context.Context, _a1 *inventoryv1.ResourceFilter) ([]*inventoryv1.Resource, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []*inventoryv1.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) ([]*inventoryv1.Resource, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) []*inventoryv1.Resource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*inventoryv1.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *inventoryv1.ResourceFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInventoryClient_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockInventoryClient_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *inventoryv1.ResourceFilter
func (_e *MockInventoryClient_Expecter) ListAll(_a0 interface{}, _a1 interface{}) *MockInventoryClient_ListAll_Call {
	return &MockInventoryClient_ListAll_Call{Call: _e.mock.On("ListAll", _a0, _a1)}
}

func (_c *MockInventoryClient_ListAll_Call) Run(run func(_a0 context.Context, _a1 *inventoryv1.ResourceFilter)) *MockInventoryClient_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*inventoryv1.ResourceFilter))
	})
	return _c
}

func (_c *MockInventoryClient_ListAll_Call) Return(_a0 []*inventoryv1.Resource, _a1 error) *MockInventoryClient_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInventoryClient_ListAll_Call) RunAndReturn(run func(context.Context, *inventoryv1.ResourceFilter) ([]*inventoryv1.Resource, error)) *MockInventoryClient_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListInheritedTelemetryProfiles provides a mock function with given fields: ctx, inheritBy, filter, orderBy, limit, offset
func (_m *MockInventoryClient) ListInheritedTelemetryProfiles(ctx context.Context, inheritBy *inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy, filter string, orderBy string, limit uint32, offset uint32) (*inventoryv1.ListInheritedTelemetryProfilesResponse, error) {
	ret := _m.Called(ctx, inheritBy, filter, orderBy, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListInheritedTelemetryProfiles")
	}

	var r0 *inventoryv1.ListInheritedTelemetryProfilesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy, string, string, uint32, uint32) (*inventoryv1.ListInheritedTelemetryProfilesResponse, error)); ok {
		return rf(ctx, inheritBy, filter, orderBy, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy, string, string, uint32, uint32) *inventoryv1.ListInheritedTelemetryProfilesResponse); ok {
		r0 = rf(ctx, inheritBy, filter, orderBy, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.ListInheritedTelemetryProfilesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy, string, string, uint32, uint32) error); ok {
		r1 = rf(ctx, inheritBy, filter, orderBy, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInventoryClient_ListInheritedTelemetryProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInheritedTelemetryProfiles'
type MockInventoryClient_ListInheritedTelemetryProfiles_Call struct {
	*mock.Call
}

// ListInheritedTelemetryProfiles is a helper method to define mock.On call
//   - ctx context.Context
//   - inheritBy *inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy
//   - filter string
//   - orderBy string
//   - limit uint32
//   - offset uint32
func (_e *MockInventoryClient_Expecter) ListInheritedTelemetryProfiles(ctx interface{}, inheritBy interface{}, filter interface{}, orderBy interface{}, limit interface{}, offset interface{}) *MockInventoryClient_ListInheritedTelemetryProfiles_Call {
	return &MockInventoryClient_ListInheritedTelemetryProfiles_Call{Call: _e.mock.On("ListInheritedTelemetryProfiles", ctx, inheritBy, filter, orderBy, limit, offset)}
}

func (_c *MockInventoryClient_ListInheritedTelemetryProfiles_Call) Run(run func(ctx context.Context, inheritBy *inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy, filter string, orderBy string, limit uint32, offset uint32)) *MockInventoryClient_ListInheritedTelemetryProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy), args[2].(string), args[3].(string), args[4].(uint32), args[5].(uint32))
	})
	return _c
}

func (_c *MockInventoryClient_ListInheritedTelemetryProfiles_Call) Return(_a0 *inventoryv1.ListInheritedTelemetryProfilesResponse, _a1 error) *MockInventoryClient_ListInheritedTelemetryProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInventoryClient_ListInheritedTelemetryProfiles_Call) RunAndReturn(run func(context.Context, *inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy, string, string, uint32, uint32) (*inventoryv1.ListInheritedTelemetryProfilesResponse, error)) *MockInventoryClient_ListInheritedTelemetryProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// TestGetClientCache provides a mock function with no fields
func (_m *MockInventoryClient) TestGetClientCache() *cache.InventoryCache {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TestGetClientCache")
	}

	var r0 *cache.InventoryCache
	if rf, ok := ret.Get(0).(func() *cache.InventoryCache); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cache.InventoryCache)
		}
	}

	return r0
}

// MockInventoryClient_TestGetClientCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestGetClientCache'
type MockInventoryClient_TestGetClientCache_Call struct {
	*mock.Call
}

// TestGetClientCache is a helper method to define mock.On call
func (_e *MockInventoryClient_Expecter) TestGetClientCache() *MockInventoryClient_TestGetClientCache_Call {
	return &MockInventoryClient_TestGetClientCache_Call{Call: _e.mock.On("TestGetClientCache")}
}

func (_c *MockInventoryClient_TestGetClientCache_Call) Run(run func()) *MockInventoryClient_TestGetClientCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInventoryClient_TestGetClientCache_Call) Return(_a0 *cache.InventoryCache) *MockInventoryClient_TestGetClientCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInventoryClient_TestGetClientCache_Call) RunAndReturn(run func() *cache.InventoryCache) *MockInventoryClient_TestGetClientCache_Call {
	_c.Call.Return(run)
	return _c
}

// TestGetClientCacheUUID provides a mock function with no fields
func (_m *MockInventoryClient) TestGetClientCacheUUID() *cache.InventoryCache {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TestGetClientCacheUUID")
	}

	var r0 *cache.InventoryCache
	if rf, ok := ret.Get(0).(func() *cache.InventoryCache); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cache.InventoryCache)
		}
	}

	return r0
}

// MockInventoryClient_TestGetClientCacheUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestGetClientCacheUUID'
type MockInventoryClient_TestGetClientCacheUUID_Call struct {
	*mock.Call
}

// TestGetClientCacheUUID is a helper method to define mock.On call
func (_e *MockInventoryClient_Expecter) TestGetClientCacheUUID() *MockInventoryClient_TestGetClientCacheUUID_Call {
	return &MockInventoryClient_TestGetClientCacheUUID_Call{Call: _e.mock.On("TestGetClientCacheUUID")}
}

func (_c *MockInventoryClient_TestGetClientCacheUUID_Call) Run(run func()) *MockInventoryClient_TestGetClientCacheUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInventoryClient_TestGetClientCacheUUID_Call) Return(_a0 *cache.InventoryCache) *MockInventoryClient_TestGetClientCacheUUID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInventoryClient_TestGetClientCacheUUID_Call) RunAndReturn(run func() *cache.InventoryCache) *MockInventoryClient_TestGetClientCacheUUID_Call {
	_c.Call.Return(run)
	return _c
}

// TestingOnlySetClient provides a mock function with given fields: _a0
func (_m *MockInventoryClient) TestingOnlySetClient(_a0 inventoryv1.InventoryServiceClient) {
	_m.Called(_a0)
}

// MockInventoryClient_TestingOnlySetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestingOnlySetClient'
type MockInventoryClient_TestingOnlySetClient_Call struct {
	*mock.Call
}

// TestingOnlySetClient is a helper method to define mock.On call
//   - _a0 inventoryv1.InventoryServiceClient
func (_e *MockInventoryClient_Expecter) TestingOnlySetClient(_a0 interface{}) *MockInventoryClient_TestingOnlySetClient_Call {
	return &MockInventoryClient_TestingOnlySetClient_Call{Call: _e.mock.On("TestingOnlySetClient", _a0)}
}

func (_c *MockInventoryClient_TestingOnlySetClient_Call) Run(run func(_a0 inventoryv1.InventoryServiceClient)) *MockInventoryClient_TestingOnlySetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(inventoryv1.InventoryServiceClient))
	})
	return _c
}

func (_c *MockInventoryClient_TestingOnlySetClient_Call) Return() *MockInventoryClient_TestingOnlySetClient_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInventoryClient_TestingOnlySetClient_Call) RunAndReturn(run func(inventoryv1.InventoryServiceClient)) *MockInventoryClient_TestingOnlySetClient_Call {
	_c.Run(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, fm, res
func (_m *MockInventoryClient) Update(ctx context.Context, id string, fm *fieldmaskpb.FieldMask, res *inventoryv1.Resource) (*inventoryv1.Resource, error) {
	ret := _m.Called(ctx, id, fm, res)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *inventoryv1.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *fieldmaskpb.FieldMask, *inventoryv1.Resource) (*inventoryv1.Resource, error)); ok {
		return rf(ctx, id, fm, res)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *fieldmaskpb.FieldMask, *inventoryv1.Resource) *inventoryv1.Resource); ok {
		r0 = rf(ctx, id, fm, res)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *fieldmaskpb.FieldMask, *inventoryv1.Resource) error); ok {
		r1 = rf(ctx, id, fm, res)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInventoryClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockInventoryClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - fm *fieldmaskpb.FieldMask
//   - res *inventoryv1.Resource
func (_e *MockInventoryClient_Expecter) Update(ctx interface{}, id interface{}, fm interface{}, res interface{}) *MockInventoryClient_Update_Call {
	return &MockInventoryClient_Update_Call{Call: _e.mock.On("Update", ctx, id, fm, res)}
}

func (_c *MockInventoryClient_Update_Call) Run(run func(ctx context.Context, id string, fm *fieldmaskpb.FieldMask, res *inventoryv1.Resource)) *MockInventoryClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*fieldmaskpb.FieldMask), args[3].(*inventoryv1.Resource))
	})
	return _c
}

func (_c *MockInventoryClient_Update_Call) Return(_a0 *inventoryv1.Resource, _a1 error) *MockInventoryClient_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInventoryClient_Update_Call) RunAndReturn(run func(context.Context, string, *fieldmaskpb.FieldMask, *inventoryv1.Resource) (*inventoryv1.Resource, error)) *MockInventoryClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSubscriptions provides a mock function with given fields: ctx, kinds
func (_m *MockInventoryClient) UpdateSubscriptions(ctx context.Context, kinds []inventoryv1.ResourceKind) error {
	ret := _m.Called(ctx, kinds)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscriptions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []inventoryv1.ResourceKind) error); ok {
		r0 = rf(ctx, kinds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInventoryClient_UpdateSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubscriptions'
type MockInventoryClient_UpdateSubscriptions_Call struct {
	*mock.Call
}

// UpdateSubscriptions is a helper method to define mock.On call
//   - ctx context.Context
//   - kinds []inventoryv1.ResourceKind
func (_e *MockInventoryClient_Expecter) UpdateSubscriptions(ctx interface{}, kinds interface{}) *MockInventoryClient_UpdateSubscriptions_Call {
	return &MockInventoryClient_UpdateSubscriptions_Call{Call: _e.mock.On("UpdateSubscriptions", ctx, kinds)}
}

func (_c *MockInventoryClient_UpdateSubscriptions_Call) Run(run func(ctx context.Context, kinds []inventoryv1.ResourceKind)) *MockInventoryClient_UpdateSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]inventoryv1.ResourceKind))
	})
	return _c
}

func (_c *MockInventoryClient_UpdateSubscriptions_Call) Return(_a0 error) *MockInventoryClient_UpdateSubscriptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInventoryClient_UpdateSubscriptions_Call) RunAndReturn(run func(context.Context, []inventoryv1.ResourceKind) error) *MockInventoryClient_UpdateSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInventoryClient creates a new instance of MockInventoryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInventoryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInventoryClient {
	mock := &MockInventoryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
