// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package telemetry.v1;

import "buf/validate/validate.proto";
import "compute/v1/compute.proto";
import "ent/opts.proto";
import "infrainv/infrainv.proto";
import "location/v1/location.proto";

option go_package = "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/telemetry/v1;telemetryv1";

enum SeverityLevel {
  SEVERITY_LEVEL_UNSPECIFIED = 0;
  SEVERITY_LEVEL_CRITICAL = 1;
  SEVERITY_LEVEL_ERROR = 2;
  SEVERITY_LEVEL_WARN = 3;
  SEVERITY_LEVEL_INFO = 4;
  SEVERITY_LEVEL_DEBUG = 5;
}

enum TelemetryResourceKind {
  TELEMETRY_RESOURCE_KIND_UNSPECIFIED = 0;
  TELEMETRY_RESOURCE_KIND_METRICS = 1;
  TELEMETRY_RESOURCE_KIND_LOGS = 2;
}

enum CollectorKind {
  COLLECTOR_KIND_UNSPECIFIED = 0;
  COLLECTOR_KIND_HOST = 1; // telemetry data collected from bare-metal host
  COLLECTOR_KIND_CLUSTER = 2; // // telemetry data collected from Kubernetes cluster
}

// TelemetryResource defines a concrete grouping of telemetry data (metrics, logs or traces).
message TelemetryGroupResource {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^telemetrygroup-[0-9a-f]{8}$"
      max_bytes: 23
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Resource ID of this Telemetry

  string name = 2 [(ent.field) = {optional: false}]; // user-provided, human-readable name
  TelemetryResourceKind kind = 3 [(ent.field) = {optional: false}];
  CollectorKind collector_kind = 4 [(ent.field) = {optional: false}];

  repeated string groups = 40 [
    (ent.field) = {optional: false},
    (buf.validate.field).repeated.items.string = {pattern: "^[^|]*$"}
  ]; // list of metrics/logs/traces (depends on kind) groups to be gathered. It should always include entries of the same kind.

  repeated TelemetryProfile profiles = 50 [(ent.edge) = {ref: "group"}]; // back-reference to the TelemetryProfiles associated to this TelemetryGroup. Read only.

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}

message TelemetryProfile {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^telemetryprofile-[0-9a-f]{8}$"
      max_bytes: 25
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // resource ID, generated by inventory on Create

  // mutually exclusive
  oneof relation {
    location.v1.RegionResource region = 10 [(ent.edge) = {unique: true}];
    location.v1.SiteResource site = 11 [(ent.edge) = {unique: true}];
    compute.v1.InstanceResource instance = 12 [(ent.edge) = {unique: true}];
  }

  TelemetryResourceKind kind = 20 [(ent.field) = {optional: false}];

  uint32 metrics_interval = 30 [
    (ent.field) = {optional: true},
    (buf.validate.field).uint32 = {gt: 0},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // metrics interval in seconds, must be set for kind METRICS only
  SeverityLevel log_level = 31 [(ent.field) = {optional: true}]; // log level, must be set for kind LOGS only
  TelemetryGroupResource group = 32 [(ent.edge) = {
    unique: true
    required: true
  }];

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}
