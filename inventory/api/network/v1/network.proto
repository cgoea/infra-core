// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package network.v1;

import "buf/validate/validate.proto";
import "compute/v1/compute.proto";
import "ent/opts.proto";
import "infrainv/infrainv.proto";
import "location/v1/location.proto";

option go_package = "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/network/v1;networkv1";

message EndpointResource {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^endpoint-[0-9a-f]{8}$"
      max_bytes: 17
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // resource ID, generated by inventory on Create
  string kind = 2 [(ent.field) = {optional: true}]; // Kind of resource. Frequently tied to Provider
  string name = 3 [(ent.field) = {optional: true}]; // user-provided, human-readable name of endpoint
  compute.v1.HostResource host = 12 [(ent.edge) = {unique: true}]; // Host this Endpoint belongs to

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}

enum NetlinkState {
  NETLINK_STATE_UNSPECIFIED = 0;
  NETLINK_STATE_DELETED = 1;
  NETLINK_STATE_ONLINE = 2;
  NETLINK_STATE_OFFLINE = 3;
  NETLINK_STATE_ERROR = 4;
}

message NetlinkResource {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^netlink-[0-9a-f]{8}$"
      max_bytes: 16
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // resource ID, generated by inventory on Create
  string kind = 2 [(ent.field) = {optional: true}]; // Kind of resource. Frequently tied to Provider
  string name = 3 [(ent.field) = {optional: true}]; // user-provided, human-readable name of netlink resource

  NetlinkState desired_state = 4;
  NetlinkState current_state = 5 [(ent.field) = {optional: true}];
  string provider_status = 6 [(ent.field) = {optional: true}];

  EndpointResource src = 16 [(ent.edge) = {unique: true}];
  EndpointResource dst = 17 [(ent.edge) = {unique: true}];

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}

// NetworkSegment represents a logical Layer 1 (L1) of the network and a VLAN (i.e., broadcast domain)
message NetworkSegment {
  option (ent.schema) = {gen: true};

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^netseg-[0-9a-f]{8}$"
      max_bytes: 15
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // resource ID, generated by inventory on Create
  string name = 2 [(ent.field) = {optional: true}]; // user-provided, human-readable name of network segment
  int32 vlan_id = 3 [
    (buf.validate.field).int32 = {
      gte: 0
      lt: 4095
    },
    (buf.validate.field).int32.not_in = 1,
    (ent.field) = {optional: true}
  ];
  location.v1.SiteResource site = 4 [(ent.edge) = {
    unique: true
    required: true
  }]; // Site this NetworkSegment is located at, it can't be null

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}

message IPAddressResource {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };

  // Resource ID, generated by Inventory on Create
  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^ipaddr-[0-9a-f]{8}$"
      max_bytes: 15
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ];
  // An IP Address using CIDR notation (e.g., 192.168.1.12/24). Empty to allow the allocation in future
  string address = 2 [(ent.field) = {optional: true}];
  // Set to optional to allow the discovery
  IPAddressState desired_state = 5 [(ent.field) = {optional: true}];
  IPAddressState current_state = 6 [(ent.field) = {optional: true}];
  IPAddressStatus status = 7 [(ent.field) = {optional: true}];
  // User-friendly status to provide details about the resource state
  string status_detail = 8 [(ent.field) = {optional: true}];
  // With user-assisted config we may need to use UNSPECIFIED for discovery
  IPAddressConfigMethod config_method = 9 [(ent.field) = {optional: true}];
  compute.v1.HostnicResource nic = 15 [(ent.edge) = {
    unique: true
    required: true
  }]; // Nic this IPAddress is assigned to

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}

enum IPAddressState {
  IP_ADDRESS_STATE_UNSPECIFIED = 0;
  IP_ADDRESS_STATE_ERROR = 1;
  IP_ADDRESS_STATE_ASSIGNED = 2;
  IP_ADDRESS_STATE_CONFIGURED = 3;
  IP_ADDRESS_STATE_RELEASED = 4;
  IP_ADDRESS_STATE_DELETED = 5;
}

enum IPAddressStatus {
  IP_ADDRESS_STATUS_UNSPECIFIED = 0;
  IP_ADDRESS_STATUS_ASSIGNMENT_ERROR = 1;
  IP_ADDRESS_STATUS_ASSIGNED = 2;
  IP_ADDRESS_STATUS_CONFIGURATION_ERROR = 3;
  IP_ADDRESS_STATUS_CONFIGURED = 4;
  IP_ADDRESS_STATUS_RELEASED = 5;
  IP_ADDRESS_STATUS_ERROR = 6;
}

enum IPAddressConfigMethod {
  IP_ADDRESS_CONFIG_METHOD_UNSPECIFIED = 0;
  IP_ADDRESS_CONFIG_METHOD_STATIC = 1;
  IP_ADDRESS_CONFIG_METHOD_DYNAMIC = 2;
}
