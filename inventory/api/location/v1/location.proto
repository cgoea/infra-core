// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package location.v1;

import "buf/validate/validate.proto";
import "ent/opts.proto";
import "infrainv/infrainv.proto";
import "ou/v1/ou.proto";
import "provider/v1/provider.proto";

option go_package = "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/location/v1;locationv1";

message RegionResource {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^region-[0-9a-f]{8}$"
      max_bytes: 15
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ];
  string name = 2 [(ent.field) = {optional: true}]; // user-provided, human-readable name of region
  string region_kind = 3 [(ent.field) = {optional: true}]; // kinds like "Country", "State" and "City"
  RegionResource parent_region = 4 [(ent.edge) = {unique: true}]; // Optional parent region.
  repeated RegionResource children = 5 [(ent.edge) = {ref: "parent_region"}]; // References to children regions.
  string metadata = 50 [(ent.field) = {optional: true}]; // Record metadata with format as json string. Example: [{"key":"cluster-name","value":""},{"key":"app-id","value":""}]

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}

message SiteResource {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^site-[0-9a-f]{8}$"
      max_bytes: 13
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ];
  string name = 2 [(ent.field) = {optional: true}]; // user-provided, human-readable name of site
  RegionResource region = 4 [(ent.edge) = {unique: true}]; // Region this site is located in
  ou.v1.OuResource ou = 5 [(ent.edge) = {unique: true}]; // OU this site is part of
  string address = 7 [(ent.field) = {optional: true}];
  int32 site_lat = 8 [
    (ent.field) = {optional: true},
    (buf.validate.field).int32.gte = -900000000,
    (buf.validate.field).int32.lte = 900000000
  ]; // latitude
  int32 site_lng = 9 [
    (ent.field) = {optional: true},
    (buf.validate.field).int32.gte = -1800000000,
    (buf.validate.field).int32.lte = 1800000000
  ]; // longitude
  repeated string dns_servers = 10 [ // FIXME: make sure these strings do not contain a | character.
    (ent.field) = {optional: true},
    (buf.validate.field).repeated.items.string.ip = true
  ]; // list of DNS servers

  repeated string docker_registries = 12 [(ent.field) = {optional: true}];
  string metrics_endpoint = 13 [(ent.field) = {optional: true}];

  string http_proxy = 16 [
    (ent.field) = {optional: true},
    (buf.validate.field).string.uri_ref = true
  ];
  string https_proxy = 17 [
    (ent.field) = {optional: true},
    (buf.validate.field).string.uri_ref = true
  ];
  string ftp_proxy = 18 [
    (ent.field) = {optional: true},
    (buf.validate.field).string.uri_ref = true
  ];
  string no_proxy = 19 [(ent.field) = {optional: true}];
  provider.v1.ProviderResource provider = 30 [(ent.edge) = {unique: true}]; // Provider this Site is managed by
  string metadata = 50 [(ent.field) = {optional: true}]; // Record metadata with format as json string. Example: [{"key":"cluster-name","value":""},{"key":"app-id","value":""}]

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}
