// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package remoteaccess.v1;

import "buf/validate/validate.proto";
import "compute/v1/compute.proto";
import "ent/opts.proto";
import "infrainv/infrainv.proto";
import "status/v1/status.proto";

option go_package = "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/remoteaccess/v1";

message RemoteAccessConfiguration {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };

  // resource identifier
  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^rmtacconf-[0-9a-f]{8}$"
      max_bytes: 19
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ];

  // Resource ID of related Instance resource
  compute.v1.InstanceResource instance = 2 [(ent.edge) = {
    unique: true
    required: true
  }];

  // Remote access expiration timestamp
  uint64 expiration_timestamp = 4 [
    (ent.field) = {
      optional: false
      immutable: true
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ];

  // Port terminating reverse SSH tunnel (on orchestrator side)
  // Set by resource manager.
  uint32 local_port = 5 [
    (ent.field) = {
      unique: true
      optional: true
    },
    (buf.validate.field).uint32 = {
      gte: 1024
      lte: 65535
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ];

  // Name of remote user configured on SSH server running on EN
  // Set by resource manager.
  string user = 6 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {max_len: 20},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ];

  // Expresses current state of remote  access.
  // Managed by resource manager on behalf of provider.
  RemoteAccessState current_state = 10 [(ent.field) = {optional: true}];

  // Expresses desired state of remote access. Set by an administrator.
  RemoteAccessState desired_state = 11;

  // A group of fields describing the remote access configuration.
  // Configuration status of the resource according to the provider.
  // configuration_status, configuration_status_indicator and configuration_status_timestamp
  // should always be updated in one shot.
  string configuration_status = 12 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {max_bytes: 1024},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // textual message that describes the update status of Instance. Set by RMs only.

  // Indicates interpretation of configuration_status. Set by RMs only.
  status.v1.StatusIndication configuration_status_indicator = 13 [(ent.field) = {optional: true}];

  // UTC timestamp when status was last changed. Set by RMs only.
  uint64 configuration_status_timestamp = 14 [(ent.field) = {optional: true}];

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}

// Represents the Remote Access state, used for both current and desired state.
enum RemoteAccessState {
  REMOTE_ACCESS_STATE_UNSPECIFIED = 0;
  REMOTE_ACCESS_STATE_DELETED = 1;
  REMOTE_ACCESS_STATE_ERROR = 2;
  REMOTE_ACCESS_STATE_ENABLED = 3;
}
