// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package schedule.v1;

import "buf/validate/validate.proto";
import "compute/v1/compute.proto";
import "ent/opts.proto";
import "infrainv/infrainv.proto";
import "location/v1/location.proto";

option go_package = "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/schedule/v1;schedulev1";

enum ScheduleStatus {
  SCHEDULE_STATUS_UNSPECIFIED = 0;
  SCHEDULE_STATUS_MAINTENANCE = 1; // generic maintenance
  SCHEDULE_STATUS_SHIPPING = 2; // being shipped/in transit
  SCHEDULE_STATUS_OS_UPDATE = 3; // for performing OS updates
  SCHEDULE_STATUS_FIRMWARE_UPDATE = 4; // for peforming firmware updates
  SCHEDULE_STATUS_CLUSTER_UPDATE = 5; // for peforming cluster updates
}

message SingleScheduleResource {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^singlesche-[0-9a-f]{8}$"
      max_bytes: 19
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Resource ID of this SingleSchedule
  ScheduleStatus schedule_status = 2 [(ent.field) = {optional: true}]; // status of one-time-schedule
  string name = 3 [(ent.field) = {optional: true}]; // user-provided, human-readable name of one-time-schedule

  // These three relations are mutually exclusive
  oneof relation {
    location.v1.SiteResource target_site = 4 [(ent.edge) = {unique: true}]; // Resource ID of Site this applies to
    compute.v1.HostResource target_host = 5 [(ent.edge) = {unique: true}]; // Resource ID of Host this applies to
    compute.v1.WorkloadResource target_workload = 6 [(ent.edge) = {unique: true}]; // Resource ID of Workload this applies to
    location.v1.RegionResource target_region = 7 [(ent.edge) = {unique: true}]; // Resource ID of Region this applies to
  }

  uint64 start_seconds = 9; // start of one-time schedule
  uint64 end_seconds = 10 [(ent.field) = {optional: true}]; // end of one-time schedule

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}

message RepeatedScheduleResource {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^repeatedsche-[0-9a-f]{8}$"
      max_bytes: 21
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Resource ID of this RepeatedSchedule
  ScheduleStatus schedule_status = 2 [(ent.field) = {optional: true}];
  string name = 3 [(ent.field) = {optional: true}]; // user-provided, human-readable name of repeated schedule

  // These three relations are mutually exclusive
  oneof relation {
    location.v1.SiteResource target_site = 4 [(ent.edge) = {unique: true}]; // Resource ID of Site this applies to
    compute.v1.HostResource target_host = 5 [(ent.edge) = {unique: true}]; // Resource ID of Host this applies to
    compute.v1.WorkloadResource target_workload = 20 [(ent.edge) = {unique: true}]; // Resource ID of Workload this applies to
    location.v1.RegionResource target_region = 21 [(ent.edge) = {unique: true}]; // Resource ID of Region this applies to
  }

  uint32 duration_seconds = 6 [
    (ent.field) = {optional: true},
    (buf.validate.field).uint32 = {
      gte: 1
      lte: 86400
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // duration, in seconds
  string cron_minutes = 9 [
    (buf.validate.field).string = {pattern: "^([*]|([0-9]|([1-5][0-9]))((,([0-9]|([1-5][0-9])))*))$"},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // cron style minutes (0-59), it can be empty only when used in a Filter
  string cron_hours = 10 [
    (buf.validate.field).string = {pattern: "^([*]|([0-9]|1[0-9]|2[0-3])((,([0-9]|1[0-9]|2[0-3]))*))$"},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // cron style hours (0-23), it can be empty only when used in a Filter
  string cron_day_month = 11 [
    (buf.validate.field).string = {pattern: "^([*]|([1-9]|([12][0-9])|3[01])((,([1-9]|([12][0-9])|3[01]))*))$"},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // cron style day of month (1-31), it can be empty only when used in a Filter
  string cron_month = 12 [
    (buf.validate.field).string = {pattern: "^([*]|([1-9]|1[012])((,([1-9]|1[012]))*))$"},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // cron style month (1-12), it can be empty only when used in a Filter
  string cron_day_week = 13 [
    (buf.validate.field).string = {pattern: "^([*]|([0-6])((,([0-6]))*))$"},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // cron style day of week (0-6), it can be empty only when used in a Filter

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}
