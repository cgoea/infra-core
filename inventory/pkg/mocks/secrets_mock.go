// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/open-edge-platform/infra-core/inventory/v2/pkg/secrets (interfaces: SecretsService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecretsService is a mock of SecretsService interface.
type MockSecretsService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsServiceMockRecorder
}

// MockSecretsServiceMockRecorder is the mock recorder for MockSecretsService.
type MockSecretsServiceMockRecorder struct {
	mock *MockSecretsService
}

// NewMockSecretsService creates a new mock instance.
func NewMockSecretsService(ctrl *gomock.Controller) *MockSecretsService {
	mock := &MockSecretsService{ctrl: ctrl}
	mock.recorder = &MockSecretsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsService) EXPECT() *MockSecretsServiceMockRecorder {
	return m.recorder
}

// Logout mocks base method.
func (m *MockSecretsService) Logout(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", arg0)
}

// Logout indicates an expected call of Logout.
func (mr *MockSecretsServiceMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockSecretsService)(nil).Logout), arg0)
}

// ReadSecret mocks base method.
func (m *MockSecretsService) ReadSecret(arg0 context.Context, arg1 string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSecret", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSecret indicates an expected call of ReadSecret.
func (mr *MockSecretsServiceMockRecorder) ReadSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSecret", reflect.TypeOf((*MockSecretsService)(nil).ReadSecret), arg0, arg1)
}

// WriteSecret mocks base method.
func (m *MockSecretsService) WriteSecret(arg0 context.Context, arg1 string, arg2 map[string]interface{}) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteSecret indicates an expected call of WriteSecret.
func (mr *MockSecretsServiceMockRecorder) WriteSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSecret", reflect.TypeOf((*MockSecretsService)(nil).WriteSecret), arg0, arg1, arg2)
}
