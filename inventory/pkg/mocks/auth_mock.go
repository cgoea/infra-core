// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/open-edge-platform/infra-core/inventory/v2/pkg/auth (interfaces: AuthService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// CreateCredentialsWithUUID mocks base method.
func (m *MockAuthService) CreateCredentialsWithUUID(arg0 context.Context, arg1, arg2 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredentialsWithUUID", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCredentialsWithUUID indicates an expected call of CreateCredentialsWithUUID.
func (mr *MockAuthServiceMockRecorder) CreateCredentialsWithUUID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredentialsWithUUID", reflect.TypeOf((*MockAuthService)(nil).CreateCredentialsWithUUID), arg0, arg1, arg2)
}

// GetCredentialsByUUID mocks base method.
func (m *MockAuthService) GetCredentialsByUUID(arg0 context.Context, arg1, arg2 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsByUUID", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCredentialsByUUID indicates an expected call of GetCredentialsByUUID.
func (mr *MockAuthServiceMockRecorder) GetCredentialsByUUID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsByUUID", reflect.TypeOf((*MockAuthService)(nil).GetCredentialsByUUID), arg0, arg1, arg2)
}

// Logout mocks base method.
func (m *MockAuthService) Logout(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", arg0)
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthServiceMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthService)(nil).Logout), arg0)
}

// RevokeCredentialsByUUID mocks base method.
func (m *MockAuthService) RevokeCredentialsByUUID(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeCredentialsByUUID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeCredentialsByUUID indicates an expected call of RevokeCredentialsByUUID.
func (mr *MockAuthServiceMockRecorder) RevokeCredentialsByUUID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeCredentialsByUUID", reflect.TypeOf((*MockAuthService)(nil).RevokeCredentialsByUUID), arg0, arg1, arg2)
}
