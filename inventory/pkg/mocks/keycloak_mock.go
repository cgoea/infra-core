// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/open-edge-platform/infra-core/inventory/v2/pkg/auth (interfaces: KeycloakAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gocloak "github.com/Nerzal/gocloak/v13"
	gomock "github.com/golang/mock/gomock"
)

// MockKeycloakAPI is a mock of KeycloakAPI interface.
type MockKeycloakAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKeycloakAPIMockRecorder
}

// MockKeycloakAPIMockRecorder is the mock recorder for MockKeycloakAPI.
type MockKeycloakAPIMockRecorder struct {
	mock *MockKeycloakAPI
}

// NewMockKeycloakAPI creates a new mock instance.
func NewMockKeycloakAPI(ctrl *gomock.Controller) *MockKeycloakAPI {
	mock := &MockKeycloakAPI{ctrl: ctrl}
	mock.recorder = &MockKeycloakAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeycloakAPI) EXPECT() *MockKeycloakAPIMockRecorder {
	return m.recorder
}

// AddUserToGroup mocks base method.
func (m *MockKeycloakAPI) AddUserToGroup(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToGroup", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToGroup indicates an expected call of AddUserToGroup.
func (mr *MockKeycloakAPIMockRecorder) AddUserToGroup(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockKeycloakAPI)(nil).AddUserToGroup), arg0, arg1, arg2, arg3, arg4)
}

// CreateClient mocks base method.
func (m *MockKeycloakAPI) CreateClient(arg0 context.Context, arg1, arg2 string, arg3 gocloak.Client) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockKeycloakAPIMockRecorder) CreateClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockKeycloakAPI)(nil).CreateClient), arg0, arg1, arg2, arg3)
}

// DeleteClient mocks base method.
func (m *MockKeycloakAPI) DeleteClient(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockKeycloakAPIMockRecorder) DeleteClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockKeycloakAPI)(nil).DeleteClient), arg0, arg1, arg2, arg3)
}

// GetClientSecret mocks base method.
func (m *MockKeycloakAPI) GetClientSecret(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.CredentialRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.CredentialRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientSecret indicates an expected call of GetClientSecret.
func (mr *MockKeycloakAPIMockRecorder) GetClientSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientSecret", reflect.TypeOf((*MockKeycloakAPI)(nil).GetClientSecret), arg0, arg1, arg2, arg3)
}

// GetClients mocks base method.
func (m *MockKeycloakAPI) GetClients(arg0 context.Context, arg1, arg2 string, arg3 gocloak.GetClientsParams) ([]*gocloak.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients.
func (mr *MockKeycloakAPIMockRecorder) GetClients(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockKeycloakAPI)(nil).GetClients), arg0, arg1, arg2, arg3)
}

// GetGroups mocks base method.
func (m *MockKeycloakAPI) GetGroups(arg0 context.Context, arg1, arg2 string, arg3 gocloak.GetGroupsParams) ([]*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockKeycloakAPIMockRecorder) GetGroups(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockKeycloakAPI)(nil).GetGroups), arg0, arg1, arg2, arg3)
}

// GetRoleMappingByUserID mocks base method.
func (m *MockKeycloakAPI) GetRoleMappingByUserID(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.MappingsRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleMappingByUserID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.MappingsRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleMappingByUserID indicates an expected call of GetRoleMappingByUserID.
func (mr *MockKeycloakAPIMockRecorder) GetRoleMappingByUserID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleMappingByUserID", reflect.TypeOf((*MockKeycloakAPI)(nil).GetRoleMappingByUserID), arg0, arg1, arg2, arg3)
}

// GetUsers mocks base method.
func (m *MockKeycloakAPI) GetUsers(arg0 context.Context, arg1, arg2 string, arg3 gocloak.GetUsersParams) ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockKeycloakAPIMockRecorder) GetUsers(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockKeycloakAPI)(nil).GetUsers), arg0, arg1, arg2, arg3)
}

// Logout mocks base method.
func (m *MockKeycloakAPI) Logout(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockKeycloakAPIMockRecorder) Logout(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockKeycloakAPI)(nil).Logout), arg0, arg1, arg2, arg3, arg4)
}
