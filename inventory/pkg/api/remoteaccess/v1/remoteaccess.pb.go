// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: remoteaccess/v1/remoteaccess.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "entgo.io/contrib/entproto/cmd/protoc-gen-ent/options/ent"
	v1 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/compute/v1"
	v11 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/status/v1"
	_ "github.com/open-edge-platform/infra-core/inventory/v2/pkg/infrainv"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the Remote Access state, used for both current and desired state.
type RemoteAccessState int32

const (
	RemoteAccessState_REMOTE_ACCESS_STATE_UNSPECIFIED RemoteAccessState = 0
	RemoteAccessState_REMOTE_ACCESS_STATE_DELETED     RemoteAccessState = 1
	RemoteAccessState_REMOTE_ACCESS_STATE_ERROR       RemoteAccessState = 2
	RemoteAccessState_REMOTE_ACCESS_STATE_ENABLED     RemoteAccessState = 3
)

// Enum value maps for RemoteAccessState.
var (
	RemoteAccessState_name = map[int32]string{
		0: "REMOTE_ACCESS_STATE_UNSPECIFIED",
		1: "REMOTE_ACCESS_STATE_DELETED",
		2: "REMOTE_ACCESS_STATE_ERROR",
		3: "REMOTE_ACCESS_STATE_ENABLED",
	}
	RemoteAccessState_value = map[string]int32{
		"REMOTE_ACCESS_STATE_UNSPECIFIED": 0,
		"REMOTE_ACCESS_STATE_DELETED":     1,
		"REMOTE_ACCESS_STATE_ERROR":       2,
		"REMOTE_ACCESS_STATE_ENABLED":     3,
	}
)

func (x RemoteAccessState) Enum() *RemoteAccessState {
	p := new(RemoteAccessState)
	*p = x
	return p
}

func (x RemoteAccessState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoteAccessState) Descriptor() protoreflect.EnumDescriptor {
	return file_remoteaccess_v1_remoteaccess_proto_enumTypes[0].Descriptor()
}

func (RemoteAccessState) Type() protoreflect.EnumType {
	return &file_remoteaccess_v1_remoteaccess_proto_enumTypes[0]
}

func (x RemoteAccessState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoteAccessState.Descriptor instead.
func (RemoteAccessState) EnumDescriptor() ([]byte, []int) {
	return file_remoteaccess_v1_remoteaccess_proto_rawDescGZIP(), []int{0}
}

type RemoteAccessConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource identifier
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Resource ID of related Instance resource
	Instance *v1.InstanceResource `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	// Remote access expiration timestamp
	ExpirationTimestamp uint64 `protobuf:"varint,4,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
	// Port terminating reverse SSH tunnel (on orchestrator side)
	// Set by resource manager.
	LocalPort uint32 `protobuf:"varint,5,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	// Name of remote user configured on SSH server running on EN
	// Set by resource manager.
	User string `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	// Expresses current state of remote  access.
	// Managed by resource manager on behalf of provider.
	CurrentState RemoteAccessState `protobuf:"varint,10,opt,name=current_state,json=currentState,proto3,enum=remoteaccess.v1.RemoteAccessState" json:"current_state,omitempty"`
	// Expresses desired state of remote access. Set by an administrator.
	DesiredState RemoteAccessState `protobuf:"varint,11,opt,name=desired_state,json=desiredState,proto3,enum=remoteaccess.v1.RemoteAccessState" json:"desired_state,omitempty"`
	// A group of fields describing the remote access configuration.
	// Configuration status of the resource according to the provider.
	// configuration_status, configuration_status_indicator and configuration_status_timestamp
	// should always be updated in one shot.
	ConfigurationStatus string `protobuf:"bytes,12,opt,name=configuration_status,json=configurationStatus,proto3" json:"configuration_status,omitempty"` // textual message that describes the update status of Instance. Set by RMs only.
	// Indicates interpretation of configuration_status. Set by RMs only.
	ConfigurationStatusIndicator v11.StatusIndication `protobuf:"varint,13,opt,name=configuration_status_indicator,json=configurationStatusIndicator,proto3,enum=status.v1.StatusIndication" json:"configuration_status_indicator,omitempty"`
	// UTC timestamp when status was last changed. Set by RMs only.
	ConfigurationStatusTimestamp uint64 `protobuf:"varint,14,opt,name=configuration_status_timestamp,json=configurationStatusTimestamp,proto3" json:"configuration_status_timestamp,omitempty"`
	TenantId                     string `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`    // Tenant Identifier
	CreatedAt                    string `protobuf:"bytes,200,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // Creation timestamp
	UpdatedAt                    string `protobuf:"bytes,201,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // Update timestamp
}

func (x *RemoteAccessConfiguration) Reset() {
	*x = RemoteAccessConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remoteaccess_v1_remoteaccess_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteAccessConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteAccessConfiguration) ProtoMessage() {}

func (x *RemoteAccessConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_remoteaccess_v1_remoteaccess_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteAccessConfiguration.ProtoReflect.Descriptor instead.
func (*RemoteAccessConfiguration) Descriptor() ([]byte, []int) {
	return file_remoteaccess_v1_remoteaccess_proto_rawDescGZIP(), []int{0}
}

func (x *RemoteAccessConfiguration) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *RemoteAccessConfiguration) GetInstance() *v1.InstanceResource {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *RemoteAccessConfiguration) GetExpirationTimestamp() uint64 {
	if x != nil {
		return x.ExpirationTimestamp
	}
	return 0
}

func (x *RemoteAccessConfiguration) GetLocalPort() uint32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *RemoteAccessConfiguration) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *RemoteAccessConfiguration) GetCurrentState() RemoteAccessState {
	if x != nil {
		return x.CurrentState
	}
	return RemoteAccessState_REMOTE_ACCESS_STATE_UNSPECIFIED
}

func (x *RemoteAccessConfiguration) GetDesiredState() RemoteAccessState {
	if x != nil {
		return x.DesiredState
	}
	return RemoteAccessState_REMOTE_ACCESS_STATE_UNSPECIFIED
}

func (x *RemoteAccessConfiguration) GetConfigurationStatus() string {
	if x != nil {
		return x.ConfigurationStatus
	}
	return ""
}

func (x *RemoteAccessConfiguration) GetConfigurationStatusIndicator() v11.StatusIndication {
	if x != nil {
		return x.ConfigurationStatusIndicator
	}
	return v11.StatusIndication(0)
}

func (x *RemoteAccessConfiguration) GetConfigurationStatusTimestamp() uint64 {
	if x != nil {
		return x.ConfigurationStatusTimestamp
	}
	return 0
}

func (x *RemoteAccessConfiguration) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *RemoteAccessConfiguration) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *RemoteAccessConfiguration) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_remoteaccess_v1_remoteaccess_proto protoreflect.FileDescriptor

var file_remoteaccess_v1_remoteaccess_proto_rawDesc = []byte{
	0x0a, 0x22, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x6e,
	0x74, 0x2f, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x69, 0x6e, 0x76, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x69, 0x6e, 0x76, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x07,
	0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x29, 0xba, 0x48, 0x20, 0xd8, 0x01, 0x01, 0x72, 0x1b, 0x28, 0x13, 0x32, 0x17, 0x5e, 0x72,
	0x6d, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x6e, 0x66, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18,
	0x01, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x14, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0e, 0xba, 0x48, 0x03, 0xd8, 0x01,
	0x01, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x01, 0x52, 0x13, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36,
	0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x17, 0xba, 0x48, 0x0c, 0xd8, 0x01, 0x01, 0x2a, 0x07, 0x18, 0xff, 0xff, 0x03,
	0x28, 0x80, 0x08, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xba, 0x48, 0x07, 0xd8, 0x01, 0x01, 0x72, 0x02, 0x18, 0x14,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a,
	0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x08, 0xd8, 0x01, 0x01, 0x72, 0x03, 0x28, 0x80,
	0x08, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x69, 0x0a, 0x1e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x0a, 0xd8, 0x01, 0x01,
	0x72, 0x05, 0x28, 0x24, 0xb0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x01, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x01, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x00, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x19, 0xb2, 0xf9, 0x03,
	0x0f, 0x0a, 0x0d, 0x12, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x00,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x2a, 0x99, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x1f,
	0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x42, 0x4f, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_remoteaccess_v1_remoteaccess_proto_rawDescOnce sync.Once
	file_remoteaccess_v1_remoteaccess_proto_rawDescData = file_remoteaccess_v1_remoteaccess_proto_rawDesc
)

func file_remoteaccess_v1_remoteaccess_proto_rawDescGZIP() []byte {
	file_remoteaccess_v1_remoteaccess_proto_rawDescOnce.Do(func() {
		file_remoteaccess_v1_remoteaccess_proto_rawDescData = protoimpl.X.CompressGZIP(file_remoteaccess_v1_remoteaccess_proto_rawDescData)
	})
	return file_remoteaccess_v1_remoteaccess_proto_rawDescData
}

var file_remoteaccess_v1_remoteaccess_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_remoteaccess_v1_remoteaccess_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_remoteaccess_v1_remoteaccess_proto_goTypes = []interface{}{
	(RemoteAccessState)(0),            // 0: remoteaccess.v1.RemoteAccessState
	(*RemoteAccessConfiguration)(nil), // 1: remoteaccess.v1.RemoteAccessConfiguration
	(*v1.InstanceResource)(nil),       // 2: compute.v1.InstanceResource
	(v11.StatusIndication)(0),         // 3: status.v1.StatusIndication
}
var file_remoteaccess_v1_remoteaccess_proto_depIdxs = []int32{
	2, // 0: remoteaccess.v1.RemoteAccessConfiguration.instance:type_name -> compute.v1.InstanceResource
	0, // 1: remoteaccess.v1.RemoteAccessConfiguration.current_state:type_name -> remoteaccess.v1.RemoteAccessState
	0, // 2: remoteaccess.v1.RemoteAccessConfiguration.desired_state:type_name -> remoteaccess.v1.RemoteAccessState
	3, // 3: remoteaccess.v1.RemoteAccessConfiguration.configuration_status_indicator:type_name -> status.v1.StatusIndication
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_remoteaccess_v1_remoteaccess_proto_init() }
func file_remoteaccess_v1_remoteaccess_proto_init() {
	if File_remoteaccess_v1_remoteaccess_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_remoteaccess_v1_remoteaccess_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteAccessConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_remoteaccess_v1_remoteaccess_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_remoteaccess_v1_remoteaccess_proto_goTypes,
		DependencyIndexes: file_remoteaccess_v1_remoteaccess_proto_depIdxs,
		EnumInfos:         file_remoteaccess_v1_remoteaccess_proto_enumTypes,
		MessageInfos:      file_remoteaccess_v1_remoteaccess_proto_msgTypes,
	}.Build()
	File_remoteaccess_v1_remoteaccess_proto = out.File
	file_remoteaccess_v1_remoteaccess_proto_rawDesc = nil
	file_remoteaccess_v1_remoteaccess_proto_goTypes = nil
	file_remoteaccess_v1_remoteaccess_proto_depIdxs = nil
}
