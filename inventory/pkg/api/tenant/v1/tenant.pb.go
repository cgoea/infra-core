// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: tenant/v1/tenant.proto

package tenantv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "entgo.io/contrib/entproto/cmd/protoc-gen-ent/options/ent"
	_ "github.com/open-edge-platform/infra-core/inventory/v2/pkg/infrainv"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An Enum with the states defined by the Multi-tenant framework
type TenantState int32

const (
	TenantState_TENANT_STATE_UNSPECIFIED TenantState = 0
	TenantState_TENANT_STATE_CREATED     TenantState = 1
	TenantState_TENANT_STATE_DELETED     TenantState = 2
)

// Enum value maps for TenantState.
var (
	TenantState_name = map[int32]string{
		0: "TENANT_STATE_UNSPECIFIED",
		1: "TENANT_STATE_CREATED",
		2: "TENANT_STATE_DELETED",
	}
	TenantState_value = map[string]int32{
		"TENANT_STATE_UNSPECIFIED": 0,
		"TENANT_STATE_CREATED":     1,
		"TENANT_STATE_DELETED":     2,
	}
)

func (x TenantState) Enum() *TenantState {
	p := new(TenantState)
	*p = x
	return p
}

func (x TenantState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TenantState) Descriptor() protoreflect.EnumDescriptor {
	return file_tenant_v1_tenant_proto_enumTypes[0].Descriptor()
}

func (TenantState) Type() protoreflect.EnumType {
	return &file_tenant_v1_tenant_proto_enumTypes[0]
}

func (x TenantState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TenantState.Descriptor instead.
func (TenantState) EnumDescriptor() ([]byte, []int) {
	return file_tenant_v1_tenant_proto_rawDescGZIP(), []int{0}
}

type Tenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource identifier
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Expresses current state of tenant.
	CurrentState TenantState `protobuf:"varint,2,opt,name=current_state,json=currentState,proto3,enum=tenant.v1.TenantState" json:"current_state,omitempty"`
	// Expresses desired state of tenant.
	DesiredState TenantState `protobuf:"varint,3,opt,name=desired_state,json=desiredState,proto3,enum=tenant.v1.TenantState" json:"desired_state,omitempty"`
	// state of tenant initialization on osmanager side
	WatcherOsmanager bool   `protobuf:"varint,4,opt,name=watcher_osmanager,json=watcherOsmanager,proto3" json:"watcher_osmanager,omitempty"` // --------------------------------------------------------------------------------
	TenantId         string `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                        // Tenant Identifier
	CreatedAt        string `protobuf:"bytes,200,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                     // Creation timestamp
	UpdatedAt        string `protobuf:"bytes,201,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                     // Update timestamp
}

func (x *Tenant) Reset() {
	*x = Tenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_v1_tenant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tenant) ProtoMessage() {}

func (x *Tenant) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_v1_tenant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tenant.ProtoReflect.Descriptor instead.
func (*Tenant) Descriptor() ([]byte, []int) {
	return file_tenant_v1_tenant_proto_rawDescGZIP(), []int{0}
}

func (x *Tenant) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *Tenant) GetCurrentState() TenantState {
	if x != nil {
		return x.CurrentState
	}
	return TenantState_TENANT_STATE_UNSPECIFIED
}

func (x *Tenant) GetDesiredState() TenantState {
	if x != nil {
		return x.DesiredState
	}
	return TenantState_TENANT_STATE_UNSPECIFIED
}

func (x *Tenant) GetWatcherOsmanager() bool {
	if x != nil {
		return x.WatcherOsmanager
	}
	return false
}

func (x *Tenant) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Tenant) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Tenant) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_tenant_v1_tenant_proto protoreflect.FileDescriptor

var file_tenant_v1_tenant_proto_rawDesc = []byte{
	0x0a, 0x16, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x69, 0x6e, 0x76, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x69, 0x6e, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x03, 0x0a, 0x06, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xba, 0x48, 0x1d, 0xd8, 0x01,
	0x01, 0x72, 0x18, 0x28, 0x13, 0x32, 0x14, 0x5e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xba, 0xa6, 0x49, 0x02, 0x18,
	0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x11, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x6f, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x10, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x4f, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0xba, 0x48, 0x0a, 0xd8, 0x01, 0x01, 0x72, 0x05, 0x28, 0x24, 0xb0, 0x01, 0x01, 0xba, 0xa6,
	0x49, 0x06, 0x08, 0x00, 0x18, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28,
	0x01, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54,
	0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00,
	0x28, 0x00, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x3a, 0x19, 0xb2, 0xf9, 0x03, 0x0f, 0x0a, 0x0d, 0x12, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x00, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x2a,
	0x5f, 0x0a, 0x0b, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x42, 0x52, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tenant_v1_tenant_proto_rawDescOnce sync.Once
	file_tenant_v1_tenant_proto_rawDescData = file_tenant_v1_tenant_proto_rawDesc
)

func file_tenant_v1_tenant_proto_rawDescGZIP() []byte {
	file_tenant_v1_tenant_proto_rawDescOnce.Do(func() {
		file_tenant_v1_tenant_proto_rawDescData = protoimpl.X.CompressGZIP(file_tenant_v1_tenant_proto_rawDescData)
	})
	return file_tenant_v1_tenant_proto_rawDescData
}

var file_tenant_v1_tenant_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tenant_v1_tenant_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_tenant_v1_tenant_proto_goTypes = []interface{}{
	(TenantState)(0), // 0: tenant.v1.TenantState
	(*Tenant)(nil),   // 1: tenant.v1.Tenant
}
var file_tenant_v1_tenant_proto_depIdxs = []int32{
	0, // 0: tenant.v1.Tenant.current_state:type_name -> tenant.v1.TenantState
	0, // 1: tenant.v1.Tenant.desired_state:type_name -> tenant.v1.TenantState
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_tenant_v1_tenant_proto_init() }
func file_tenant_v1_tenant_proto_init() {
	if File_tenant_v1_tenant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tenant_v1_tenant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tenant_v1_tenant_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tenant_v1_tenant_proto_goTypes,
		DependencyIndexes: file_tenant_v1_tenant_proto_depIdxs,
		EnumInfos:         file_tenant_v1_tenant_proto_enumTypes,
		MessageInfos:      file_tenant_v1_tenant_proto_msgTypes,
	}.Build()
	File_tenant_v1_tenant_proto = out.File
	file_tenant_v1_tenant_proto_rawDesc = nil
	file_tenant_v1_tenant_proto_goTypes = nil
	file_tenant_v1_tenant_proto_depIdxs = nil
}
