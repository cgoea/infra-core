// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/remoteaccessconfiguration"
)

// RemoteAccessConfigurationUpdate is the builder for updating RemoteAccessConfiguration entities.
type RemoteAccessConfigurationUpdate struct {
	config
	hooks    []Hook
	mutation *RemoteAccessConfigurationMutation
}

// Where appends a list predicates to the RemoteAccessConfigurationUpdate builder.
func (racu *RemoteAccessConfigurationUpdate) Where(ps ...predicate.RemoteAccessConfiguration) *RemoteAccessConfigurationUpdate {
	racu.mutation.Where(ps...)
	return racu
}

// SetResourceID sets the "resource_id" field.
func (racu *RemoteAccessConfigurationUpdate) SetResourceID(s string) *RemoteAccessConfigurationUpdate {
	racu.mutation.SetResourceID(s)
	return racu
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (racu *RemoteAccessConfigurationUpdate) SetNillableResourceID(s *string) *RemoteAccessConfigurationUpdate {
	if s != nil {
		racu.SetResourceID(*s)
	}
	return racu
}

// SetLocalPort sets the "local_port" field.
func (racu *RemoteAccessConfigurationUpdate) SetLocalPort(u uint32) *RemoteAccessConfigurationUpdate {
	racu.mutation.ResetLocalPort()
	racu.mutation.SetLocalPort(u)
	return racu
}

// SetNillableLocalPort sets the "local_port" field if the given value is not nil.
func (racu *RemoteAccessConfigurationUpdate) SetNillableLocalPort(u *uint32) *RemoteAccessConfigurationUpdate {
	if u != nil {
		racu.SetLocalPort(*u)
	}
	return racu
}

// AddLocalPort adds u to the "local_port" field.
func (racu *RemoteAccessConfigurationUpdate) AddLocalPort(u int32) *RemoteAccessConfigurationUpdate {
	racu.mutation.AddLocalPort(u)
	return racu
}

// ClearLocalPort clears the value of the "local_port" field.
func (racu *RemoteAccessConfigurationUpdate) ClearLocalPort() *RemoteAccessConfigurationUpdate {
	racu.mutation.ClearLocalPort()
	return racu
}

// SetUser sets the "user" field.
func (racu *RemoteAccessConfigurationUpdate) SetUser(s string) *RemoteAccessConfigurationUpdate {
	racu.mutation.SetUser(s)
	return racu
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (racu *RemoteAccessConfigurationUpdate) SetNillableUser(s *string) *RemoteAccessConfigurationUpdate {
	if s != nil {
		racu.SetUser(*s)
	}
	return racu
}

// ClearUser clears the value of the "user" field.
func (racu *RemoteAccessConfigurationUpdate) ClearUser() *RemoteAccessConfigurationUpdate {
	racu.mutation.ClearUser()
	return racu
}

// SetCurrentState sets the "current_state" field.
func (racu *RemoteAccessConfigurationUpdate) SetCurrentState(rs remoteaccessconfiguration.CurrentState) *RemoteAccessConfigurationUpdate {
	racu.mutation.SetCurrentState(rs)
	return racu
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (racu *RemoteAccessConfigurationUpdate) SetNillableCurrentState(rs *remoteaccessconfiguration.CurrentState) *RemoteAccessConfigurationUpdate {
	if rs != nil {
		racu.SetCurrentState(*rs)
	}
	return racu
}

// ClearCurrentState clears the value of the "current_state" field.
func (racu *RemoteAccessConfigurationUpdate) ClearCurrentState() *RemoteAccessConfigurationUpdate {
	racu.mutation.ClearCurrentState()
	return racu
}

// SetDesiredState sets the "desired_state" field.
func (racu *RemoteAccessConfigurationUpdate) SetDesiredState(rs remoteaccessconfiguration.DesiredState) *RemoteAccessConfigurationUpdate {
	racu.mutation.SetDesiredState(rs)
	return racu
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (racu *RemoteAccessConfigurationUpdate) SetNillableDesiredState(rs *remoteaccessconfiguration.DesiredState) *RemoteAccessConfigurationUpdate {
	if rs != nil {
		racu.SetDesiredState(*rs)
	}
	return racu
}

// SetConfigurationStatus sets the "configuration_status" field.
func (racu *RemoteAccessConfigurationUpdate) SetConfigurationStatus(s string) *RemoteAccessConfigurationUpdate {
	racu.mutation.SetConfigurationStatus(s)
	return racu
}

// SetNillableConfigurationStatus sets the "configuration_status" field if the given value is not nil.
func (racu *RemoteAccessConfigurationUpdate) SetNillableConfigurationStatus(s *string) *RemoteAccessConfigurationUpdate {
	if s != nil {
		racu.SetConfigurationStatus(*s)
	}
	return racu
}

// ClearConfigurationStatus clears the value of the "configuration_status" field.
func (racu *RemoteAccessConfigurationUpdate) ClearConfigurationStatus() *RemoteAccessConfigurationUpdate {
	racu.mutation.ClearConfigurationStatus()
	return racu
}

// SetConfigurationStatusIndicator sets the "configuration_status_indicator" field.
func (racu *RemoteAccessConfigurationUpdate) SetConfigurationStatusIndicator(rsi remoteaccessconfiguration.ConfigurationStatusIndicator) *RemoteAccessConfigurationUpdate {
	racu.mutation.SetConfigurationStatusIndicator(rsi)
	return racu
}

// SetNillableConfigurationStatusIndicator sets the "configuration_status_indicator" field if the given value is not nil.
func (racu *RemoteAccessConfigurationUpdate) SetNillableConfigurationStatusIndicator(rsi *remoteaccessconfiguration.ConfigurationStatusIndicator) *RemoteAccessConfigurationUpdate {
	if rsi != nil {
		racu.SetConfigurationStatusIndicator(*rsi)
	}
	return racu
}

// ClearConfigurationStatusIndicator clears the value of the "configuration_status_indicator" field.
func (racu *RemoteAccessConfigurationUpdate) ClearConfigurationStatusIndicator() *RemoteAccessConfigurationUpdate {
	racu.mutation.ClearConfigurationStatusIndicator()
	return racu
}

// SetConfigurationStatusTimestamp sets the "configuration_status_timestamp" field.
func (racu *RemoteAccessConfigurationUpdate) SetConfigurationStatusTimestamp(u uint64) *RemoteAccessConfigurationUpdate {
	racu.mutation.ResetConfigurationStatusTimestamp()
	racu.mutation.SetConfigurationStatusTimestamp(u)
	return racu
}

// SetNillableConfigurationStatusTimestamp sets the "configuration_status_timestamp" field if the given value is not nil.
func (racu *RemoteAccessConfigurationUpdate) SetNillableConfigurationStatusTimestamp(u *uint64) *RemoteAccessConfigurationUpdate {
	if u != nil {
		racu.SetConfigurationStatusTimestamp(*u)
	}
	return racu
}

// AddConfigurationStatusTimestamp adds u to the "configuration_status_timestamp" field.
func (racu *RemoteAccessConfigurationUpdate) AddConfigurationStatusTimestamp(u int64) *RemoteAccessConfigurationUpdate {
	racu.mutation.AddConfigurationStatusTimestamp(u)
	return racu
}

// ClearConfigurationStatusTimestamp clears the value of the "configuration_status_timestamp" field.
func (racu *RemoteAccessConfigurationUpdate) ClearConfigurationStatusTimestamp() *RemoteAccessConfigurationUpdate {
	racu.mutation.ClearConfigurationStatusTimestamp()
	return racu
}

// SetUpdatedAt sets the "updated_at" field.
func (racu *RemoteAccessConfigurationUpdate) SetUpdatedAt(s string) *RemoteAccessConfigurationUpdate {
	racu.mutation.SetUpdatedAt(s)
	return racu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (racu *RemoteAccessConfigurationUpdate) SetNillableUpdatedAt(s *string) *RemoteAccessConfigurationUpdate {
	if s != nil {
		racu.SetUpdatedAt(*s)
	}
	return racu
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (racu *RemoteAccessConfigurationUpdate) SetInstanceID(id int) *RemoteAccessConfigurationUpdate {
	racu.mutation.SetInstanceID(id)
	return racu
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (racu *RemoteAccessConfigurationUpdate) SetInstance(i *InstanceResource) *RemoteAccessConfigurationUpdate {
	return racu.SetInstanceID(i.ID)
}

// Mutation returns the RemoteAccessConfigurationMutation object of the builder.
func (racu *RemoteAccessConfigurationUpdate) Mutation() *RemoteAccessConfigurationMutation {
	return racu.mutation
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (racu *RemoteAccessConfigurationUpdate) ClearInstance() *RemoteAccessConfigurationUpdate {
	racu.mutation.ClearInstance()
	return racu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (racu *RemoteAccessConfigurationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, racu.sqlSave, racu.mutation, racu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (racu *RemoteAccessConfigurationUpdate) SaveX(ctx context.Context) int {
	affected, err := racu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (racu *RemoteAccessConfigurationUpdate) Exec(ctx context.Context) error {
	_, err := racu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (racu *RemoteAccessConfigurationUpdate) ExecX(ctx context.Context) {
	if err := racu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (racu *RemoteAccessConfigurationUpdate) check() error {
	if v, ok := racu.mutation.CurrentState(); ok {
		if err := remoteaccessconfiguration.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "RemoteAccessConfiguration.current_state": %w`, err)}
		}
	}
	if v, ok := racu.mutation.DesiredState(); ok {
		if err := remoteaccessconfiguration.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "RemoteAccessConfiguration.desired_state": %w`, err)}
		}
	}
	if v, ok := racu.mutation.ConfigurationStatusIndicator(); ok {
		if err := remoteaccessconfiguration.ConfigurationStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "configuration_status_indicator", err: fmt.Errorf(`ent: validator failed for field "RemoteAccessConfiguration.configuration_status_indicator": %w`, err)}
		}
	}
	if racu.mutation.InstanceCleared() && len(racu.mutation.InstanceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RemoteAccessConfiguration.instance"`)
	}
	return nil
}

func (racu *RemoteAccessConfigurationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := racu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(remoteaccessconfiguration.Table, remoteaccessconfiguration.Columns, sqlgraph.NewFieldSpec(remoteaccessconfiguration.FieldID, field.TypeInt))
	if ps := racu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := racu.mutation.ResourceID(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldResourceID, field.TypeString, value)
	}
	if value, ok := racu.mutation.LocalPort(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldLocalPort, field.TypeUint32, value)
	}
	if value, ok := racu.mutation.AddedLocalPort(); ok {
		_spec.AddField(remoteaccessconfiguration.FieldLocalPort, field.TypeUint32, value)
	}
	if racu.mutation.LocalPortCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldLocalPort, field.TypeUint32)
	}
	if value, ok := racu.mutation.User(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldUser, field.TypeString, value)
	}
	if racu.mutation.UserCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldUser, field.TypeString)
	}
	if value, ok := racu.mutation.CurrentState(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldCurrentState, field.TypeEnum, value)
	}
	if racu.mutation.CurrentStateCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := racu.mutation.DesiredState(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldDesiredState, field.TypeEnum, value)
	}
	if value, ok := racu.mutation.ConfigurationStatus(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldConfigurationStatus, field.TypeString, value)
	}
	if racu.mutation.ConfigurationStatusCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldConfigurationStatus, field.TypeString)
	}
	if value, ok := racu.mutation.ConfigurationStatusIndicator(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldConfigurationStatusIndicator, field.TypeEnum, value)
	}
	if racu.mutation.ConfigurationStatusIndicatorCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldConfigurationStatusIndicator, field.TypeEnum)
	}
	if value, ok := racu.mutation.ConfigurationStatusTimestamp(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldConfigurationStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := racu.mutation.AddedConfigurationStatusTimestamp(); ok {
		_spec.AddField(remoteaccessconfiguration.FieldConfigurationStatusTimestamp, field.TypeUint64, value)
	}
	if racu.mutation.ConfigurationStatusTimestampCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldConfigurationStatusTimestamp, field.TypeUint64)
	}
	if value, ok := racu.mutation.UpdatedAt(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldUpdatedAt, field.TypeString, value)
	}
	if racu.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   remoteaccessconfiguration.InstanceTable,
			Columns: []string{remoteaccessconfiguration.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := racu.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   remoteaccessconfiguration.InstanceTable,
			Columns: []string{remoteaccessconfiguration.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, racu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{remoteaccessconfiguration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	racu.mutation.done = true
	return n, nil
}

// RemoteAccessConfigurationUpdateOne is the builder for updating a single RemoteAccessConfiguration entity.
type RemoteAccessConfigurationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RemoteAccessConfigurationMutation
}

// SetResourceID sets the "resource_id" field.
func (racuo *RemoteAccessConfigurationUpdateOne) SetResourceID(s string) *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.SetResourceID(s)
	return racuo
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (racuo *RemoteAccessConfigurationUpdateOne) SetNillableResourceID(s *string) *RemoteAccessConfigurationUpdateOne {
	if s != nil {
		racuo.SetResourceID(*s)
	}
	return racuo
}

// SetLocalPort sets the "local_port" field.
func (racuo *RemoteAccessConfigurationUpdateOne) SetLocalPort(u uint32) *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.ResetLocalPort()
	racuo.mutation.SetLocalPort(u)
	return racuo
}

// SetNillableLocalPort sets the "local_port" field if the given value is not nil.
func (racuo *RemoteAccessConfigurationUpdateOne) SetNillableLocalPort(u *uint32) *RemoteAccessConfigurationUpdateOne {
	if u != nil {
		racuo.SetLocalPort(*u)
	}
	return racuo
}

// AddLocalPort adds u to the "local_port" field.
func (racuo *RemoteAccessConfigurationUpdateOne) AddLocalPort(u int32) *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.AddLocalPort(u)
	return racuo
}

// ClearLocalPort clears the value of the "local_port" field.
func (racuo *RemoteAccessConfigurationUpdateOne) ClearLocalPort() *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.ClearLocalPort()
	return racuo
}

// SetUser sets the "user" field.
func (racuo *RemoteAccessConfigurationUpdateOne) SetUser(s string) *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.SetUser(s)
	return racuo
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (racuo *RemoteAccessConfigurationUpdateOne) SetNillableUser(s *string) *RemoteAccessConfigurationUpdateOne {
	if s != nil {
		racuo.SetUser(*s)
	}
	return racuo
}

// ClearUser clears the value of the "user" field.
func (racuo *RemoteAccessConfigurationUpdateOne) ClearUser() *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.ClearUser()
	return racuo
}

// SetCurrentState sets the "current_state" field.
func (racuo *RemoteAccessConfigurationUpdateOne) SetCurrentState(rs remoteaccessconfiguration.CurrentState) *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.SetCurrentState(rs)
	return racuo
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (racuo *RemoteAccessConfigurationUpdateOne) SetNillableCurrentState(rs *remoteaccessconfiguration.CurrentState) *RemoteAccessConfigurationUpdateOne {
	if rs != nil {
		racuo.SetCurrentState(*rs)
	}
	return racuo
}

// ClearCurrentState clears the value of the "current_state" field.
func (racuo *RemoteAccessConfigurationUpdateOne) ClearCurrentState() *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.ClearCurrentState()
	return racuo
}

// SetDesiredState sets the "desired_state" field.
func (racuo *RemoteAccessConfigurationUpdateOne) SetDesiredState(rs remoteaccessconfiguration.DesiredState) *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.SetDesiredState(rs)
	return racuo
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (racuo *RemoteAccessConfigurationUpdateOne) SetNillableDesiredState(rs *remoteaccessconfiguration.DesiredState) *RemoteAccessConfigurationUpdateOne {
	if rs != nil {
		racuo.SetDesiredState(*rs)
	}
	return racuo
}

// SetConfigurationStatus sets the "configuration_status" field.
func (racuo *RemoteAccessConfigurationUpdateOne) SetConfigurationStatus(s string) *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.SetConfigurationStatus(s)
	return racuo
}

// SetNillableConfigurationStatus sets the "configuration_status" field if the given value is not nil.
func (racuo *RemoteAccessConfigurationUpdateOne) SetNillableConfigurationStatus(s *string) *RemoteAccessConfigurationUpdateOne {
	if s != nil {
		racuo.SetConfigurationStatus(*s)
	}
	return racuo
}

// ClearConfigurationStatus clears the value of the "configuration_status" field.
func (racuo *RemoteAccessConfigurationUpdateOne) ClearConfigurationStatus() *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.ClearConfigurationStatus()
	return racuo
}

// SetConfigurationStatusIndicator sets the "configuration_status_indicator" field.
func (racuo *RemoteAccessConfigurationUpdateOne) SetConfigurationStatusIndicator(rsi remoteaccessconfiguration.ConfigurationStatusIndicator) *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.SetConfigurationStatusIndicator(rsi)
	return racuo
}

// SetNillableConfigurationStatusIndicator sets the "configuration_status_indicator" field if the given value is not nil.
func (racuo *RemoteAccessConfigurationUpdateOne) SetNillableConfigurationStatusIndicator(rsi *remoteaccessconfiguration.ConfigurationStatusIndicator) *RemoteAccessConfigurationUpdateOne {
	if rsi != nil {
		racuo.SetConfigurationStatusIndicator(*rsi)
	}
	return racuo
}

// ClearConfigurationStatusIndicator clears the value of the "configuration_status_indicator" field.
func (racuo *RemoteAccessConfigurationUpdateOne) ClearConfigurationStatusIndicator() *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.ClearConfigurationStatusIndicator()
	return racuo
}

// SetConfigurationStatusTimestamp sets the "configuration_status_timestamp" field.
func (racuo *RemoteAccessConfigurationUpdateOne) SetConfigurationStatusTimestamp(u uint64) *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.ResetConfigurationStatusTimestamp()
	racuo.mutation.SetConfigurationStatusTimestamp(u)
	return racuo
}

// SetNillableConfigurationStatusTimestamp sets the "configuration_status_timestamp" field if the given value is not nil.
func (racuo *RemoteAccessConfigurationUpdateOne) SetNillableConfigurationStatusTimestamp(u *uint64) *RemoteAccessConfigurationUpdateOne {
	if u != nil {
		racuo.SetConfigurationStatusTimestamp(*u)
	}
	return racuo
}

// AddConfigurationStatusTimestamp adds u to the "configuration_status_timestamp" field.
func (racuo *RemoteAccessConfigurationUpdateOne) AddConfigurationStatusTimestamp(u int64) *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.AddConfigurationStatusTimestamp(u)
	return racuo
}

// ClearConfigurationStatusTimestamp clears the value of the "configuration_status_timestamp" field.
func (racuo *RemoteAccessConfigurationUpdateOne) ClearConfigurationStatusTimestamp() *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.ClearConfigurationStatusTimestamp()
	return racuo
}

// SetUpdatedAt sets the "updated_at" field.
func (racuo *RemoteAccessConfigurationUpdateOne) SetUpdatedAt(s string) *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.SetUpdatedAt(s)
	return racuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (racuo *RemoteAccessConfigurationUpdateOne) SetNillableUpdatedAt(s *string) *RemoteAccessConfigurationUpdateOne {
	if s != nil {
		racuo.SetUpdatedAt(*s)
	}
	return racuo
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (racuo *RemoteAccessConfigurationUpdateOne) SetInstanceID(id int) *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.SetInstanceID(id)
	return racuo
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (racuo *RemoteAccessConfigurationUpdateOne) SetInstance(i *InstanceResource) *RemoteAccessConfigurationUpdateOne {
	return racuo.SetInstanceID(i.ID)
}

// Mutation returns the RemoteAccessConfigurationMutation object of the builder.
func (racuo *RemoteAccessConfigurationUpdateOne) Mutation() *RemoteAccessConfigurationMutation {
	return racuo.mutation
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (racuo *RemoteAccessConfigurationUpdateOne) ClearInstance() *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.ClearInstance()
	return racuo
}

// Where appends a list predicates to the RemoteAccessConfigurationUpdate builder.
func (racuo *RemoteAccessConfigurationUpdateOne) Where(ps ...predicate.RemoteAccessConfiguration) *RemoteAccessConfigurationUpdateOne {
	racuo.mutation.Where(ps...)
	return racuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (racuo *RemoteAccessConfigurationUpdateOne) Select(field string, fields ...string) *RemoteAccessConfigurationUpdateOne {
	racuo.fields = append([]string{field}, fields...)
	return racuo
}

// Save executes the query and returns the updated RemoteAccessConfiguration entity.
func (racuo *RemoteAccessConfigurationUpdateOne) Save(ctx context.Context) (*RemoteAccessConfiguration, error) {
	return withHooks(ctx, racuo.sqlSave, racuo.mutation, racuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (racuo *RemoteAccessConfigurationUpdateOne) SaveX(ctx context.Context) *RemoteAccessConfiguration {
	node, err := racuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (racuo *RemoteAccessConfigurationUpdateOne) Exec(ctx context.Context) error {
	_, err := racuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (racuo *RemoteAccessConfigurationUpdateOne) ExecX(ctx context.Context) {
	if err := racuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (racuo *RemoteAccessConfigurationUpdateOne) check() error {
	if v, ok := racuo.mutation.CurrentState(); ok {
		if err := remoteaccessconfiguration.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "RemoteAccessConfiguration.current_state": %w`, err)}
		}
	}
	if v, ok := racuo.mutation.DesiredState(); ok {
		if err := remoteaccessconfiguration.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "RemoteAccessConfiguration.desired_state": %w`, err)}
		}
	}
	if v, ok := racuo.mutation.ConfigurationStatusIndicator(); ok {
		if err := remoteaccessconfiguration.ConfigurationStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "configuration_status_indicator", err: fmt.Errorf(`ent: validator failed for field "RemoteAccessConfiguration.configuration_status_indicator": %w`, err)}
		}
	}
	if racuo.mutation.InstanceCleared() && len(racuo.mutation.InstanceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RemoteAccessConfiguration.instance"`)
	}
	return nil
}

func (racuo *RemoteAccessConfigurationUpdateOne) sqlSave(ctx context.Context) (_node *RemoteAccessConfiguration, err error) {
	if err := racuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(remoteaccessconfiguration.Table, remoteaccessconfiguration.Columns, sqlgraph.NewFieldSpec(remoteaccessconfiguration.FieldID, field.TypeInt))
	id, ok := racuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RemoteAccessConfiguration.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := racuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, remoteaccessconfiguration.FieldID)
		for _, f := range fields {
			if !remoteaccessconfiguration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != remoteaccessconfiguration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := racuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := racuo.mutation.ResourceID(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldResourceID, field.TypeString, value)
	}
	if value, ok := racuo.mutation.LocalPort(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldLocalPort, field.TypeUint32, value)
	}
	if value, ok := racuo.mutation.AddedLocalPort(); ok {
		_spec.AddField(remoteaccessconfiguration.FieldLocalPort, field.TypeUint32, value)
	}
	if racuo.mutation.LocalPortCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldLocalPort, field.TypeUint32)
	}
	if value, ok := racuo.mutation.User(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldUser, field.TypeString, value)
	}
	if racuo.mutation.UserCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldUser, field.TypeString)
	}
	if value, ok := racuo.mutation.CurrentState(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldCurrentState, field.TypeEnum, value)
	}
	if racuo.mutation.CurrentStateCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := racuo.mutation.DesiredState(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldDesiredState, field.TypeEnum, value)
	}
	if value, ok := racuo.mutation.ConfigurationStatus(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldConfigurationStatus, field.TypeString, value)
	}
	if racuo.mutation.ConfigurationStatusCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldConfigurationStatus, field.TypeString)
	}
	if value, ok := racuo.mutation.ConfigurationStatusIndicator(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldConfigurationStatusIndicator, field.TypeEnum, value)
	}
	if racuo.mutation.ConfigurationStatusIndicatorCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldConfigurationStatusIndicator, field.TypeEnum)
	}
	if value, ok := racuo.mutation.ConfigurationStatusTimestamp(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldConfigurationStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := racuo.mutation.AddedConfigurationStatusTimestamp(); ok {
		_spec.AddField(remoteaccessconfiguration.FieldConfigurationStatusTimestamp, field.TypeUint64, value)
	}
	if racuo.mutation.ConfigurationStatusTimestampCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldConfigurationStatusTimestamp, field.TypeUint64)
	}
	if value, ok := racuo.mutation.UpdatedAt(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldUpdatedAt, field.TypeString, value)
	}
	if racuo.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   remoteaccessconfiguration.InstanceTable,
			Columns: []string{remoteaccessconfiguration.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := racuo.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   remoteaccessconfiguration.InstanceTable,
			Columns: []string{remoteaccessconfiguration.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RemoteAccessConfiguration{config: racuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, racuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{remoteaccessconfiguration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	racuo.mutation.done = true
	return _node, nil
}
