// Code generated by ent, DO NOT EDIT.

package tenant

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the tenant type in the database.
	Label = "tenant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldCurrentState holds the string denoting the current_state field in the database.
	FieldCurrentState = "current_state"
	// FieldDesiredState holds the string denoting the desired_state field in the database.
	FieldDesiredState = "desired_state"
	// FieldWatcherOsmanager holds the string denoting the watcher_osmanager field in the database.
	FieldWatcherOsmanager = "watcher_osmanager"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the tenant in the database.
	Table = "tenants"
)

// Columns holds all SQL columns for tenant fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldCurrentState,
	FieldDesiredState,
	FieldWatcherOsmanager,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// CurrentState defines the type for the "current_state" enum field.
type CurrentState string

// CurrentState values.
const (
	CurrentStateTENANT_STATE_UNSPECIFIED CurrentState = "TENANT_STATE_UNSPECIFIED"
	CurrentStateTENANT_STATE_CREATED     CurrentState = "TENANT_STATE_CREATED"
	CurrentStateTENANT_STATE_DELETED     CurrentState = "TENANT_STATE_DELETED"
)

func (cs CurrentState) String() string {
	return string(cs)
}

// CurrentStateValidator is a validator for the "current_state" field enum values. It is called by the builders before save.
func CurrentStateValidator(cs CurrentState) error {
	switch cs {
	case CurrentStateTENANT_STATE_UNSPECIFIED, CurrentStateTENANT_STATE_CREATED, CurrentStateTENANT_STATE_DELETED:
		return nil
	default:
		return fmt.Errorf("tenant: invalid enum value for current_state field: %q", cs)
	}
}

// DesiredState defines the type for the "desired_state" enum field.
type DesiredState string

// DesiredState values.
const (
	DesiredStateTENANT_STATE_UNSPECIFIED DesiredState = "TENANT_STATE_UNSPECIFIED"
	DesiredStateTENANT_STATE_CREATED     DesiredState = "TENANT_STATE_CREATED"
	DesiredStateTENANT_STATE_DELETED     DesiredState = "TENANT_STATE_DELETED"
)

func (ds DesiredState) String() string {
	return string(ds)
}

// DesiredStateValidator is a validator for the "desired_state" field enum values. It is called by the builders before save.
func DesiredStateValidator(ds DesiredState) error {
	switch ds {
	case DesiredStateTENANT_STATE_UNSPECIFIED, DesiredStateTENANT_STATE_CREATED, DesiredStateTENANT_STATE_DELETED:
		return nil
	default:
		return fmt.Errorf("tenant: invalid enum value for desired_state field: %q", ds)
	}
}

// OrderOption defines the ordering options for the Tenant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByCurrentState orders the results by the current_state field.
func ByCurrentState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentState, opts...).ToFunc()
}

// ByDesiredState orders the results by the desired_state field.
func ByDesiredState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesiredState, opts...).ToFunc()
}

// ByWatcherOsmanager orders the results by the watcher_osmanager field.
func ByWatcherOsmanager(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWatcherOsmanager, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
