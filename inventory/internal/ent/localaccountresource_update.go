// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/localaccountresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// LocalAccountResourceUpdate is the builder for updating LocalAccountResource entities.
type LocalAccountResourceUpdate struct {
	config
	hooks    []Hook
	mutation *LocalAccountResourceMutation
}

// Where appends a list predicates to the LocalAccountResourceUpdate builder.
func (laru *LocalAccountResourceUpdate) Where(ps ...predicate.LocalAccountResource) *LocalAccountResourceUpdate {
	laru.mutation.Where(ps...)
	return laru
}

// SetResourceID sets the "resource_id" field.
func (laru *LocalAccountResourceUpdate) SetResourceID(s string) *LocalAccountResourceUpdate {
	laru.mutation.SetResourceID(s)
	return laru
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (laru *LocalAccountResourceUpdate) SetNillableResourceID(s *string) *LocalAccountResourceUpdate {
	if s != nil {
		laru.SetResourceID(*s)
	}
	return laru
}

// SetUpdatedAt sets the "updated_at" field.
func (laru *LocalAccountResourceUpdate) SetUpdatedAt(s string) *LocalAccountResourceUpdate {
	laru.mutation.SetUpdatedAt(s)
	return laru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (laru *LocalAccountResourceUpdate) SetNillableUpdatedAt(s *string) *LocalAccountResourceUpdate {
	if s != nil {
		laru.SetUpdatedAt(*s)
	}
	return laru
}

// Mutation returns the LocalAccountResourceMutation object of the builder.
func (laru *LocalAccountResourceUpdate) Mutation() *LocalAccountResourceMutation {
	return laru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (laru *LocalAccountResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, laru.sqlSave, laru.mutation, laru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (laru *LocalAccountResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := laru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (laru *LocalAccountResourceUpdate) Exec(ctx context.Context) error {
	_, err := laru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (laru *LocalAccountResourceUpdate) ExecX(ctx context.Context) {
	if err := laru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (laru *LocalAccountResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(localaccountresource.Table, localaccountresource.Columns, sqlgraph.NewFieldSpec(localaccountresource.FieldID, field.TypeInt))
	if ps := laru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := laru.mutation.ResourceID(); ok {
		_spec.SetField(localaccountresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := laru.mutation.UpdatedAt(); ok {
		_spec.SetField(localaccountresource.FieldUpdatedAt, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, laru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{localaccountresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	laru.mutation.done = true
	return n, nil
}

// LocalAccountResourceUpdateOne is the builder for updating a single LocalAccountResource entity.
type LocalAccountResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LocalAccountResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (laruo *LocalAccountResourceUpdateOne) SetResourceID(s string) *LocalAccountResourceUpdateOne {
	laruo.mutation.SetResourceID(s)
	return laruo
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (laruo *LocalAccountResourceUpdateOne) SetNillableResourceID(s *string) *LocalAccountResourceUpdateOne {
	if s != nil {
		laruo.SetResourceID(*s)
	}
	return laruo
}

// SetUpdatedAt sets the "updated_at" field.
func (laruo *LocalAccountResourceUpdateOne) SetUpdatedAt(s string) *LocalAccountResourceUpdateOne {
	laruo.mutation.SetUpdatedAt(s)
	return laruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (laruo *LocalAccountResourceUpdateOne) SetNillableUpdatedAt(s *string) *LocalAccountResourceUpdateOne {
	if s != nil {
		laruo.SetUpdatedAt(*s)
	}
	return laruo
}

// Mutation returns the LocalAccountResourceMutation object of the builder.
func (laruo *LocalAccountResourceUpdateOne) Mutation() *LocalAccountResourceMutation {
	return laruo.mutation
}

// Where appends a list predicates to the LocalAccountResourceUpdate builder.
func (laruo *LocalAccountResourceUpdateOne) Where(ps ...predicate.LocalAccountResource) *LocalAccountResourceUpdateOne {
	laruo.mutation.Where(ps...)
	return laruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (laruo *LocalAccountResourceUpdateOne) Select(field string, fields ...string) *LocalAccountResourceUpdateOne {
	laruo.fields = append([]string{field}, fields...)
	return laruo
}

// Save executes the query and returns the updated LocalAccountResource entity.
func (laruo *LocalAccountResourceUpdateOne) Save(ctx context.Context) (*LocalAccountResource, error) {
	return withHooks(ctx, laruo.sqlSave, laruo.mutation, laruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (laruo *LocalAccountResourceUpdateOne) SaveX(ctx context.Context) *LocalAccountResource {
	node, err := laruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (laruo *LocalAccountResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := laruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (laruo *LocalAccountResourceUpdateOne) ExecX(ctx context.Context) {
	if err := laruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (laruo *LocalAccountResourceUpdateOne) sqlSave(ctx context.Context) (_node *LocalAccountResource, err error) {
	_spec := sqlgraph.NewUpdateSpec(localaccountresource.Table, localaccountresource.Columns, sqlgraph.NewFieldSpec(localaccountresource.FieldID, field.TypeInt))
	id, ok := laruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LocalAccountResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := laruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, localaccountresource.FieldID)
		for _, f := range fields {
			if !localaccountresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != localaccountresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := laruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := laruo.mutation.ResourceID(); ok {
		_spec.SetField(localaccountresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := laruo.mutation.UpdatedAt(); ok {
		_spec.SetField(localaccountresource.FieldUpdatedAt, field.TypeString, value)
	}
	_node = &LocalAccountResource{config: laruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, laruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{localaccountresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	laruo.mutation.done = true
	return _node, nil
}
