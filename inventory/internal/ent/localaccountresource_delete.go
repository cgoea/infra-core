// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/localaccountresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// LocalAccountResourceDelete is the builder for deleting a LocalAccountResource entity.
type LocalAccountResourceDelete struct {
	config
	hooks    []Hook
	mutation *LocalAccountResourceMutation
}

// Where appends a list predicates to the LocalAccountResourceDelete builder.
func (lard *LocalAccountResourceDelete) Where(ps ...predicate.LocalAccountResource) *LocalAccountResourceDelete {
	lard.mutation.Where(ps...)
	return lard
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lard *LocalAccountResourceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lard.sqlExec, lard.mutation, lard.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lard *LocalAccountResourceDelete) ExecX(ctx context.Context) int {
	n, err := lard.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lard *LocalAccountResourceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(localaccountresource.Table, sqlgraph.NewFieldSpec(localaccountresource.FieldID, field.TypeInt))
	if ps := lard.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lard.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lard.mutation.done = true
	return affected, err
}

// LocalAccountResourceDeleteOne is the builder for deleting a single LocalAccountResource entity.
type LocalAccountResourceDeleteOne struct {
	lard *LocalAccountResourceDelete
}

// Where appends a list predicates to the LocalAccountResourceDelete builder.
func (lardo *LocalAccountResourceDeleteOne) Where(ps ...predicate.LocalAccountResource) *LocalAccountResourceDeleteOne {
	lardo.lard.mutation.Where(ps...)
	return lardo
}

// Exec executes the deletion query.
func (lardo *LocalAccountResourceDeleteOne) Exec(ctx context.Context) error {
	n, err := lardo.lard.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{localaccountresource.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lardo *LocalAccountResourceDeleteOne) ExecX(ctx context.Context) {
	if err := lardo.Exec(ctx); err != nil {
		panic(err)
	}
}
