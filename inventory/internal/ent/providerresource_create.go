// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/providerresource"
)

// ProviderResourceCreate is the builder for creating a ProviderResource entity.
type ProviderResourceCreate struct {
	config
	mutation *ProviderResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (prc *ProviderResourceCreate) SetResourceID(s string) *ProviderResourceCreate {
	prc.mutation.SetResourceID(s)
	return prc
}

// SetProviderKind sets the "provider_kind" field.
func (prc *ProviderResourceCreate) SetProviderKind(pk providerresource.ProviderKind) *ProviderResourceCreate {
	prc.mutation.SetProviderKind(pk)
	return prc
}

// SetProviderVendor sets the "provider_vendor" field.
func (prc *ProviderResourceCreate) SetProviderVendor(pv providerresource.ProviderVendor) *ProviderResourceCreate {
	prc.mutation.SetProviderVendor(pv)
	return prc
}

// SetNillableProviderVendor sets the "provider_vendor" field if the given value is not nil.
func (prc *ProviderResourceCreate) SetNillableProviderVendor(pv *providerresource.ProviderVendor) *ProviderResourceCreate {
	if pv != nil {
		prc.SetProviderVendor(*pv)
	}
	return prc
}

// SetName sets the "name" field.
func (prc *ProviderResourceCreate) SetName(s string) *ProviderResourceCreate {
	prc.mutation.SetName(s)
	return prc
}

// SetAPIEndpoint sets the "api_endpoint" field.
func (prc *ProviderResourceCreate) SetAPIEndpoint(s string) *ProviderResourceCreate {
	prc.mutation.SetAPIEndpoint(s)
	return prc
}

// SetAPICredentials sets the "api_credentials" field.
func (prc *ProviderResourceCreate) SetAPICredentials(s string) *ProviderResourceCreate {
	prc.mutation.SetAPICredentials(s)
	return prc
}

// SetNillableAPICredentials sets the "api_credentials" field if the given value is not nil.
func (prc *ProviderResourceCreate) SetNillableAPICredentials(s *string) *ProviderResourceCreate {
	if s != nil {
		prc.SetAPICredentials(*s)
	}
	return prc
}

// SetConfig sets the "config" field.
func (prc *ProviderResourceCreate) SetConfig(s string) *ProviderResourceCreate {
	prc.mutation.SetConfig(s)
	return prc
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (prc *ProviderResourceCreate) SetNillableConfig(s *string) *ProviderResourceCreate {
	if s != nil {
		prc.SetConfig(*s)
	}
	return prc
}

// SetTenantID sets the "tenant_id" field.
func (prc *ProviderResourceCreate) SetTenantID(s string) *ProviderResourceCreate {
	prc.mutation.SetTenantID(s)
	return prc
}

// SetCreatedAt sets the "created_at" field.
func (prc *ProviderResourceCreate) SetCreatedAt(s string) *ProviderResourceCreate {
	prc.mutation.SetCreatedAt(s)
	return prc
}

// SetUpdatedAt sets the "updated_at" field.
func (prc *ProviderResourceCreate) SetUpdatedAt(s string) *ProviderResourceCreate {
	prc.mutation.SetUpdatedAt(s)
	return prc
}

// Mutation returns the ProviderResourceMutation object of the builder.
func (prc *ProviderResourceCreate) Mutation() *ProviderResourceMutation {
	return prc.mutation
}

// Save creates the ProviderResource in the database.
func (prc *ProviderResourceCreate) Save(ctx context.Context) (*ProviderResource, error) {
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *ProviderResourceCreate) SaveX(ctx context.Context) *ProviderResource {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *ProviderResourceCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *ProviderResourceCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *ProviderResourceCreate) check() error {
	if _, ok := prc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "ProviderResource.resource_id"`)}
	}
	if _, ok := prc.mutation.ProviderKind(); !ok {
		return &ValidationError{Name: "provider_kind", err: errors.New(`ent: missing required field "ProviderResource.provider_kind"`)}
	}
	if v, ok := prc.mutation.ProviderKind(); ok {
		if err := providerresource.ProviderKindValidator(v); err != nil {
			return &ValidationError{Name: "provider_kind", err: fmt.Errorf(`ent: validator failed for field "ProviderResource.provider_kind": %w`, err)}
		}
	}
	if v, ok := prc.mutation.ProviderVendor(); ok {
		if err := providerresource.ProviderVendorValidator(v); err != nil {
			return &ValidationError{Name: "provider_vendor", err: fmt.Errorf(`ent: validator failed for field "ProviderResource.provider_vendor": %w`, err)}
		}
	}
	if _, ok := prc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ProviderResource.name"`)}
	}
	if _, ok := prc.mutation.APIEndpoint(); !ok {
		return &ValidationError{Name: "api_endpoint", err: errors.New(`ent: missing required field "ProviderResource.api_endpoint"`)}
	}
	if _, ok := prc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ProviderResource.tenant_id"`)}
	}
	if _, ok := prc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProviderResource.created_at"`)}
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProviderResource.updated_at"`)}
	}
	return nil
}

func (prc *ProviderResourceCreate) sqlSave(ctx context.Context) (*ProviderResource, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *ProviderResourceCreate) createSpec() (*ProviderResource, *sqlgraph.CreateSpec) {
	var (
		_node = &ProviderResource{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(providerresource.Table, sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt))
	)
	if value, ok := prc.mutation.ResourceID(); ok {
		_spec.SetField(providerresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := prc.mutation.ProviderKind(); ok {
		_spec.SetField(providerresource.FieldProviderKind, field.TypeEnum, value)
		_node.ProviderKind = value
	}
	if value, ok := prc.mutation.ProviderVendor(); ok {
		_spec.SetField(providerresource.FieldProviderVendor, field.TypeEnum, value)
		_node.ProviderVendor = value
	}
	if value, ok := prc.mutation.Name(); ok {
		_spec.SetField(providerresource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := prc.mutation.APIEndpoint(); ok {
		_spec.SetField(providerresource.FieldAPIEndpoint, field.TypeString, value)
		_node.APIEndpoint = value
	}
	if value, ok := prc.mutation.APICredentials(); ok {
		_spec.SetField(providerresource.FieldAPICredentials, field.TypeString, value)
		_node.APICredentials = value
	}
	if value, ok := prc.mutation.Config(); ok {
		_spec.SetField(providerresource.FieldConfig, field.TypeString, value)
		_node.Config = value
	}
	if value, ok := prc.mutation.TenantID(); ok {
		_spec.SetField(providerresource.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := prc.mutation.CreatedAt(); ok {
		_spec.SetField(providerresource.FieldCreatedAt, field.TypeString, value)
		_node.CreatedAt = value
	}
	if value, ok := prc.mutation.UpdatedAt(); ok {
		_spec.SetField(providerresource.FieldUpdatedAt, field.TypeString, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ProviderResourceCreateBulk is the builder for creating many ProviderResource entities in bulk.
type ProviderResourceCreateBulk struct {
	config
	err      error
	builders []*ProviderResourceCreate
}

// Save creates the ProviderResource entities in the database.
func (prcb *ProviderResourceCreateBulk) Save(ctx context.Context) ([]*ProviderResource, error) {
	if prcb.err != nil {
		return nil, prcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*ProviderResource, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProviderResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *ProviderResourceCreateBulk) SaveX(ctx context.Context) []*ProviderResource {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *ProviderResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *ProviderResourceCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
