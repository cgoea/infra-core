// Code generated by ent, DO NOT EDIT.

package remoteaccessconfiguration

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the remoteaccessconfiguration type in the database.
	Label = "remote_access_configuration"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldExpirationTimestamp holds the string denoting the expiration_timestamp field in the database.
	FieldExpirationTimestamp = "expiration_timestamp"
	// FieldLocalPort holds the string denoting the local_port field in the database.
	FieldLocalPort = "local_port"
	// FieldUser holds the string denoting the user field in the database.
	FieldUser = "user"
	// FieldCurrentState holds the string denoting the current_state field in the database.
	FieldCurrentState = "current_state"
	// FieldDesiredState holds the string denoting the desired_state field in the database.
	FieldDesiredState = "desired_state"
	// FieldConfigurationStatus holds the string denoting the configuration_status field in the database.
	FieldConfigurationStatus = "configuration_status"
	// FieldConfigurationStatusIndicator holds the string denoting the configuration_status_indicator field in the database.
	FieldConfigurationStatusIndicator = "configuration_status_indicator"
	// FieldConfigurationStatusTimestamp holds the string denoting the configuration_status_timestamp field in the database.
	FieldConfigurationStatusTimestamp = "configuration_status_timestamp"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeInstance holds the string denoting the instance edge name in mutations.
	EdgeInstance = "instance"
	// Table holds the table name of the remoteaccessconfiguration in the database.
	Table = "remote_access_configurations"
	// InstanceTable is the table that holds the instance relation/edge.
	InstanceTable = "remote_access_configurations"
	// InstanceInverseTable is the table name for the InstanceResource entity.
	// It exists in this package in order to avoid circular dependency with the "instanceresource" package.
	InstanceInverseTable = "instance_resources"
	// InstanceColumn is the table column denoting the instance relation/edge.
	InstanceColumn = "remote_access_configuration_instance"
)

// Columns holds all SQL columns for remoteaccessconfiguration fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldExpirationTimestamp,
	FieldLocalPort,
	FieldUser,
	FieldCurrentState,
	FieldDesiredState,
	FieldConfigurationStatus,
	FieldConfigurationStatusIndicator,
	FieldConfigurationStatusTimestamp,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "remote_access_configurations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"remote_access_configuration_instance",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// CurrentState defines the type for the "current_state" enum field.
type CurrentState string

// CurrentState values.
const (
	CurrentStateREMOTE_ACCESS_STATE_UNSPECIFIED CurrentState = "REMOTE_ACCESS_STATE_UNSPECIFIED"
	CurrentStateREMOTE_ACCESS_STATE_DELETED     CurrentState = "REMOTE_ACCESS_STATE_DELETED"
	CurrentStateREMOTE_ACCESS_STATE_ERROR       CurrentState = "REMOTE_ACCESS_STATE_ERROR"
	CurrentStateREMOTE_ACCESS_STATE_ENABLED     CurrentState = "REMOTE_ACCESS_STATE_ENABLED"
)

func (cs CurrentState) String() string {
	return string(cs)
}

// CurrentStateValidator is a validator for the "current_state" field enum values. It is called by the builders before save.
func CurrentStateValidator(cs CurrentState) error {
	switch cs {
	case CurrentStateREMOTE_ACCESS_STATE_UNSPECIFIED, CurrentStateREMOTE_ACCESS_STATE_DELETED, CurrentStateREMOTE_ACCESS_STATE_ERROR, CurrentStateREMOTE_ACCESS_STATE_ENABLED:
		return nil
	default:
		return fmt.Errorf("remoteaccessconfiguration: invalid enum value for current_state field: %q", cs)
	}
}

// DesiredState defines the type for the "desired_state" enum field.
type DesiredState string

// DesiredState values.
const (
	DesiredStateREMOTE_ACCESS_STATE_UNSPECIFIED DesiredState = "REMOTE_ACCESS_STATE_UNSPECIFIED"
	DesiredStateREMOTE_ACCESS_STATE_DELETED     DesiredState = "REMOTE_ACCESS_STATE_DELETED"
	DesiredStateREMOTE_ACCESS_STATE_ERROR       DesiredState = "REMOTE_ACCESS_STATE_ERROR"
	DesiredStateREMOTE_ACCESS_STATE_ENABLED     DesiredState = "REMOTE_ACCESS_STATE_ENABLED"
)

func (ds DesiredState) String() string {
	return string(ds)
}

// DesiredStateValidator is a validator for the "desired_state" field enum values. It is called by the builders before save.
func DesiredStateValidator(ds DesiredState) error {
	switch ds {
	case DesiredStateREMOTE_ACCESS_STATE_UNSPECIFIED, DesiredStateREMOTE_ACCESS_STATE_DELETED, DesiredStateREMOTE_ACCESS_STATE_ERROR, DesiredStateREMOTE_ACCESS_STATE_ENABLED:
		return nil
	default:
		return fmt.Errorf("remoteaccessconfiguration: invalid enum value for desired_state field: %q", ds)
	}
}

// ConfigurationStatusIndicator defines the type for the "configuration_status_indicator" enum field.
type ConfigurationStatusIndicator string

// ConfigurationStatusIndicator values.
const (
	ConfigurationStatusIndicatorSTATUS_INDICATION_UNSPECIFIED ConfigurationStatusIndicator = "STATUS_INDICATION_UNSPECIFIED"
	ConfigurationStatusIndicatorSTATUS_INDICATION_ERROR       ConfigurationStatusIndicator = "STATUS_INDICATION_ERROR"
	ConfigurationStatusIndicatorSTATUS_INDICATION_IN_PROGRESS ConfigurationStatusIndicator = "STATUS_INDICATION_IN_PROGRESS"
	ConfigurationStatusIndicatorSTATUS_INDICATION_IDLE        ConfigurationStatusIndicator = "STATUS_INDICATION_IDLE"
)

func (csi ConfigurationStatusIndicator) String() string {
	return string(csi)
}

// ConfigurationStatusIndicatorValidator is a validator for the "configuration_status_indicator" field enum values. It is called by the builders before save.
func ConfigurationStatusIndicatorValidator(csi ConfigurationStatusIndicator) error {
	switch csi {
	case ConfigurationStatusIndicatorSTATUS_INDICATION_UNSPECIFIED, ConfigurationStatusIndicatorSTATUS_INDICATION_ERROR, ConfigurationStatusIndicatorSTATUS_INDICATION_IN_PROGRESS, ConfigurationStatusIndicatorSTATUS_INDICATION_IDLE:
		return nil
	default:
		return fmt.Errorf("remoteaccessconfiguration: invalid enum value for configuration_status_indicator field: %q", csi)
	}
}

// OrderOption defines the ordering options for the RemoteAccessConfiguration queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByExpirationTimestamp orders the results by the expiration_timestamp field.
func ByExpirationTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpirationTimestamp, opts...).ToFunc()
}

// ByLocalPort orders the results by the local_port field.
func ByLocalPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalPort, opts...).ToFunc()
}

// ByUser orders the results by the user field.
func ByUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUser, opts...).ToFunc()
}

// ByCurrentState orders the results by the current_state field.
func ByCurrentState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentState, opts...).ToFunc()
}

// ByDesiredState orders the results by the desired_state field.
func ByDesiredState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesiredState, opts...).ToFunc()
}

// ByConfigurationStatus orders the results by the configuration_status field.
func ByConfigurationStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigurationStatus, opts...).ToFunc()
}

// ByConfigurationStatusIndicator orders the results by the configuration_status_indicator field.
func ByConfigurationStatusIndicator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigurationStatusIndicator, opts...).ToFunc()
}

// ByConfigurationStatusTimestamp orders the results by the configuration_status_timestamp field.
func ByConfigurationStatusTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigurationStatusTimestamp, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByInstanceField orders the results by instance field.
func ByInstanceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInstanceStep(), sql.OrderByField(field, opts...))
	}
}
func newInstanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InstanceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, InstanceTable, InstanceColumn),
	)
}
