// Code generated by ent, DO NOT EDIT.

package remoteaccessconfiguration

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLTE(FieldID, id))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldResourceID, v))
}

// ExpirationTimestamp applies equality check predicate on the "expiration_timestamp" field. It's identical to ExpirationTimestampEQ.
func ExpirationTimestamp(v uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldExpirationTimestamp, v))
}

// LocalPort applies equality check predicate on the "local_port" field. It's identical to LocalPortEQ.
func LocalPort(v uint32) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldLocalPort, v))
}

// User applies equality check predicate on the "user" field. It's identical to UserEQ.
func User(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldUser, v))
}

// ConfigurationStatus applies equality check predicate on the "configuration_status" field. It's identical to ConfigurationStatusEQ.
func ConfigurationStatus(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldConfigurationStatus, v))
}

// ConfigurationStatusTimestamp applies equality check predicate on the "configuration_status_timestamp" field. It's identical to ConfigurationStatusTimestampEQ.
func ConfigurationStatusTimestamp(v uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldConfigurationStatusTimestamp, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldUpdatedAt, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldContainsFold(FieldResourceID, v))
}

// ExpirationTimestampEQ applies the EQ predicate on the "expiration_timestamp" field.
func ExpirationTimestampEQ(v uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldExpirationTimestamp, v))
}

// ExpirationTimestampNEQ applies the NEQ predicate on the "expiration_timestamp" field.
func ExpirationTimestampNEQ(v uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNEQ(FieldExpirationTimestamp, v))
}

// ExpirationTimestampIn applies the In predicate on the "expiration_timestamp" field.
func ExpirationTimestampIn(vs ...uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIn(FieldExpirationTimestamp, vs...))
}

// ExpirationTimestampNotIn applies the NotIn predicate on the "expiration_timestamp" field.
func ExpirationTimestampNotIn(vs ...uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotIn(FieldExpirationTimestamp, vs...))
}

// ExpirationTimestampGT applies the GT predicate on the "expiration_timestamp" field.
func ExpirationTimestampGT(v uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGT(FieldExpirationTimestamp, v))
}

// ExpirationTimestampGTE applies the GTE predicate on the "expiration_timestamp" field.
func ExpirationTimestampGTE(v uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGTE(FieldExpirationTimestamp, v))
}

// ExpirationTimestampLT applies the LT predicate on the "expiration_timestamp" field.
func ExpirationTimestampLT(v uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLT(FieldExpirationTimestamp, v))
}

// ExpirationTimestampLTE applies the LTE predicate on the "expiration_timestamp" field.
func ExpirationTimestampLTE(v uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLTE(FieldExpirationTimestamp, v))
}

// LocalPortEQ applies the EQ predicate on the "local_port" field.
func LocalPortEQ(v uint32) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldLocalPort, v))
}

// LocalPortNEQ applies the NEQ predicate on the "local_port" field.
func LocalPortNEQ(v uint32) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNEQ(FieldLocalPort, v))
}

// LocalPortIn applies the In predicate on the "local_port" field.
func LocalPortIn(vs ...uint32) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIn(FieldLocalPort, vs...))
}

// LocalPortNotIn applies the NotIn predicate on the "local_port" field.
func LocalPortNotIn(vs ...uint32) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotIn(FieldLocalPort, vs...))
}

// LocalPortGT applies the GT predicate on the "local_port" field.
func LocalPortGT(v uint32) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGT(FieldLocalPort, v))
}

// LocalPortGTE applies the GTE predicate on the "local_port" field.
func LocalPortGTE(v uint32) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGTE(FieldLocalPort, v))
}

// LocalPortLT applies the LT predicate on the "local_port" field.
func LocalPortLT(v uint32) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLT(FieldLocalPort, v))
}

// LocalPortLTE applies the LTE predicate on the "local_port" field.
func LocalPortLTE(v uint32) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLTE(FieldLocalPort, v))
}

// LocalPortIsNil applies the IsNil predicate on the "local_port" field.
func LocalPortIsNil() predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIsNull(FieldLocalPort))
}

// LocalPortNotNil applies the NotNil predicate on the "local_port" field.
func LocalPortNotNil() predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotNull(FieldLocalPort))
}

// UserEQ applies the EQ predicate on the "user" field.
func UserEQ(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldUser, v))
}

// UserNEQ applies the NEQ predicate on the "user" field.
func UserNEQ(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNEQ(FieldUser, v))
}

// UserIn applies the In predicate on the "user" field.
func UserIn(vs ...string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIn(FieldUser, vs...))
}

// UserNotIn applies the NotIn predicate on the "user" field.
func UserNotIn(vs ...string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotIn(FieldUser, vs...))
}

// UserGT applies the GT predicate on the "user" field.
func UserGT(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGT(FieldUser, v))
}

// UserGTE applies the GTE predicate on the "user" field.
func UserGTE(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGTE(FieldUser, v))
}

// UserLT applies the LT predicate on the "user" field.
func UserLT(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLT(FieldUser, v))
}

// UserLTE applies the LTE predicate on the "user" field.
func UserLTE(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLTE(FieldUser, v))
}

// UserContains applies the Contains predicate on the "user" field.
func UserContains(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldContains(FieldUser, v))
}

// UserHasPrefix applies the HasPrefix predicate on the "user" field.
func UserHasPrefix(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldHasPrefix(FieldUser, v))
}

// UserHasSuffix applies the HasSuffix predicate on the "user" field.
func UserHasSuffix(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldHasSuffix(FieldUser, v))
}

// UserIsNil applies the IsNil predicate on the "user" field.
func UserIsNil() predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIsNull(FieldUser))
}

// UserNotNil applies the NotNil predicate on the "user" field.
func UserNotNil() predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotNull(FieldUser))
}

// UserEqualFold applies the EqualFold predicate on the "user" field.
func UserEqualFold(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEqualFold(FieldUser, v))
}

// UserContainsFold applies the ContainsFold predicate on the "user" field.
func UserContainsFold(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldContainsFold(FieldUser, v))
}

// CurrentStateEQ applies the EQ predicate on the "current_state" field.
func CurrentStateEQ(v CurrentState) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldCurrentState, v))
}

// CurrentStateNEQ applies the NEQ predicate on the "current_state" field.
func CurrentStateNEQ(v CurrentState) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNEQ(FieldCurrentState, v))
}

// CurrentStateIn applies the In predicate on the "current_state" field.
func CurrentStateIn(vs ...CurrentState) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIn(FieldCurrentState, vs...))
}

// CurrentStateNotIn applies the NotIn predicate on the "current_state" field.
func CurrentStateNotIn(vs ...CurrentState) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotIn(FieldCurrentState, vs...))
}

// CurrentStateIsNil applies the IsNil predicate on the "current_state" field.
func CurrentStateIsNil() predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIsNull(FieldCurrentState))
}

// CurrentStateNotNil applies the NotNil predicate on the "current_state" field.
func CurrentStateNotNil() predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotNull(FieldCurrentState))
}

// DesiredStateEQ applies the EQ predicate on the "desired_state" field.
func DesiredStateEQ(v DesiredState) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldDesiredState, v))
}

// DesiredStateNEQ applies the NEQ predicate on the "desired_state" field.
func DesiredStateNEQ(v DesiredState) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNEQ(FieldDesiredState, v))
}

// DesiredStateIn applies the In predicate on the "desired_state" field.
func DesiredStateIn(vs ...DesiredState) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIn(FieldDesiredState, vs...))
}

// DesiredStateNotIn applies the NotIn predicate on the "desired_state" field.
func DesiredStateNotIn(vs ...DesiredState) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotIn(FieldDesiredState, vs...))
}

// ConfigurationStatusEQ applies the EQ predicate on the "configuration_status" field.
func ConfigurationStatusEQ(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldConfigurationStatus, v))
}

// ConfigurationStatusNEQ applies the NEQ predicate on the "configuration_status" field.
func ConfigurationStatusNEQ(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNEQ(FieldConfigurationStatus, v))
}

// ConfigurationStatusIn applies the In predicate on the "configuration_status" field.
func ConfigurationStatusIn(vs ...string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIn(FieldConfigurationStatus, vs...))
}

// ConfigurationStatusNotIn applies the NotIn predicate on the "configuration_status" field.
func ConfigurationStatusNotIn(vs ...string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotIn(FieldConfigurationStatus, vs...))
}

// ConfigurationStatusGT applies the GT predicate on the "configuration_status" field.
func ConfigurationStatusGT(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGT(FieldConfigurationStatus, v))
}

// ConfigurationStatusGTE applies the GTE predicate on the "configuration_status" field.
func ConfigurationStatusGTE(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGTE(FieldConfigurationStatus, v))
}

// ConfigurationStatusLT applies the LT predicate on the "configuration_status" field.
func ConfigurationStatusLT(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLT(FieldConfigurationStatus, v))
}

// ConfigurationStatusLTE applies the LTE predicate on the "configuration_status" field.
func ConfigurationStatusLTE(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLTE(FieldConfigurationStatus, v))
}

// ConfigurationStatusContains applies the Contains predicate on the "configuration_status" field.
func ConfigurationStatusContains(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldContains(FieldConfigurationStatus, v))
}

// ConfigurationStatusHasPrefix applies the HasPrefix predicate on the "configuration_status" field.
func ConfigurationStatusHasPrefix(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldHasPrefix(FieldConfigurationStatus, v))
}

// ConfigurationStatusHasSuffix applies the HasSuffix predicate on the "configuration_status" field.
func ConfigurationStatusHasSuffix(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldHasSuffix(FieldConfigurationStatus, v))
}

// ConfigurationStatusIsNil applies the IsNil predicate on the "configuration_status" field.
func ConfigurationStatusIsNil() predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIsNull(FieldConfigurationStatus))
}

// ConfigurationStatusNotNil applies the NotNil predicate on the "configuration_status" field.
func ConfigurationStatusNotNil() predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotNull(FieldConfigurationStatus))
}

// ConfigurationStatusEqualFold applies the EqualFold predicate on the "configuration_status" field.
func ConfigurationStatusEqualFold(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEqualFold(FieldConfigurationStatus, v))
}

// ConfigurationStatusContainsFold applies the ContainsFold predicate on the "configuration_status" field.
func ConfigurationStatusContainsFold(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldContainsFold(FieldConfigurationStatus, v))
}

// ConfigurationStatusIndicatorEQ applies the EQ predicate on the "configuration_status_indicator" field.
func ConfigurationStatusIndicatorEQ(v ConfigurationStatusIndicator) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldConfigurationStatusIndicator, v))
}

// ConfigurationStatusIndicatorNEQ applies the NEQ predicate on the "configuration_status_indicator" field.
func ConfigurationStatusIndicatorNEQ(v ConfigurationStatusIndicator) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNEQ(FieldConfigurationStatusIndicator, v))
}

// ConfigurationStatusIndicatorIn applies the In predicate on the "configuration_status_indicator" field.
func ConfigurationStatusIndicatorIn(vs ...ConfigurationStatusIndicator) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIn(FieldConfigurationStatusIndicator, vs...))
}

// ConfigurationStatusIndicatorNotIn applies the NotIn predicate on the "configuration_status_indicator" field.
func ConfigurationStatusIndicatorNotIn(vs ...ConfigurationStatusIndicator) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotIn(FieldConfigurationStatusIndicator, vs...))
}

// ConfigurationStatusIndicatorIsNil applies the IsNil predicate on the "configuration_status_indicator" field.
func ConfigurationStatusIndicatorIsNil() predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIsNull(FieldConfigurationStatusIndicator))
}

// ConfigurationStatusIndicatorNotNil applies the NotNil predicate on the "configuration_status_indicator" field.
func ConfigurationStatusIndicatorNotNil() predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotNull(FieldConfigurationStatusIndicator))
}

// ConfigurationStatusTimestampEQ applies the EQ predicate on the "configuration_status_timestamp" field.
func ConfigurationStatusTimestampEQ(v uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldConfigurationStatusTimestamp, v))
}

// ConfigurationStatusTimestampNEQ applies the NEQ predicate on the "configuration_status_timestamp" field.
func ConfigurationStatusTimestampNEQ(v uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNEQ(FieldConfigurationStatusTimestamp, v))
}

// ConfigurationStatusTimestampIn applies the In predicate on the "configuration_status_timestamp" field.
func ConfigurationStatusTimestampIn(vs ...uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIn(FieldConfigurationStatusTimestamp, vs...))
}

// ConfigurationStatusTimestampNotIn applies the NotIn predicate on the "configuration_status_timestamp" field.
func ConfigurationStatusTimestampNotIn(vs ...uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotIn(FieldConfigurationStatusTimestamp, vs...))
}

// ConfigurationStatusTimestampGT applies the GT predicate on the "configuration_status_timestamp" field.
func ConfigurationStatusTimestampGT(v uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGT(FieldConfigurationStatusTimestamp, v))
}

// ConfigurationStatusTimestampGTE applies the GTE predicate on the "configuration_status_timestamp" field.
func ConfigurationStatusTimestampGTE(v uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGTE(FieldConfigurationStatusTimestamp, v))
}

// ConfigurationStatusTimestampLT applies the LT predicate on the "configuration_status_timestamp" field.
func ConfigurationStatusTimestampLT(v uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLT(FieldConfigurationStatusTimestamp, v))
}

// ConfigurationStatusTimestampLTE applies the LTE predicate on the "configuration_status_timestamp" field.
func ConfigurationStatusTimestampLTE(v uint64) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLTE(FieldConfigurationStatusTimestamp, v))
}

// ConfigurationStatusTimestampIsNil applies the IsNil predicate on the "configuration_status_timestamp" field.
func ConfigurationStatusTimestampIsNil() predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIsNull(FieldConfigurationStatusTimestamp))
}

// ConfigurationStatusTimestampNotNil applies the NotNil predicate on the "configuration_status_timestamp" field.
func ConfigurationStatusTimestampNotNil() predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotNull(FieldConfigurationStatusTimestamp))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldContainsFold(FieldTenantID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtContains applies the Contains predicate on the "created_at" field.
func CreatedAtContains(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldContains(FieldCreatedAt, v))
}

// CreatedAtHasPrefix applies the HasPrefix predicate on the "created_at" field.
func CreatedAtHasPrefix(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldHasPrefix(FieldCreatedAt, v))
}

// CreatedAtHasSuffix applies the HasSuffix predicate on the "created_at" field.
func CreatedAtHasSuffix(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldHasSuffix(FieldCreatedAt, v))
}

// CreatedAtEqualFold applies the EqualFold predicate on the "created_at" field.
func CreatedAtEqualFold(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEqualFold(FieldCreatedAt, v))
}

// CreatedAtContainsFold applies the ContainsFold predicate on the "created_at" field.
func CreatedAtContainsFold(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldContainsFold(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtContains applies the Contains predicate on the "updated_at" field.
func UpdatedAtContains(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldContains(FieldUpdatedAt, v))
}

// UpdatedAtHasPrefix applies the HasPrefix predicate on the "updated_at" field.
func UpdatedAtHasPrefix(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldHasPrefix(FieldUpdatedAt, v))
}

// UpdatedAtHasSuffix applies the HasSuffix predicate on the "updated_at" field.
func UpdatedAtHasSuffix(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldHasSuffix(FieldUpdatedAt, v))
}

// UpdatedAtEqualFold applies the EqualFold predicate on the "updated_at" field.
func UpdatedAtEqualFold(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldEqualFold(FieldUpdatedAt, v))
}

// UpdatedAtContainsFold applies the ContainsFold predicate on the "updated_at" field.
func UpdatedAtContainsFold(v string) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.FieldContainsFold(FieldUpdatedAt, v))
}

// HasInstance applies the HasEdge predicate on the "instance" edge.
func HasInstance() predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, InstanceTable, InstanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstanceWith applies the HasEdge predicate on the "instance" edge with a given conditions (other predicates).
func HasInstanceWith(preds ...predicate.InstanceResource) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(func(s *sql.Selector) {
		step := newInstanceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RemoteAccessConfiguration) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RemoteAccessConfiguration) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RemoteAccessConfiguration) predicate.RemoteAccessConfiguration {
	return predicate.RemoteAccessConfiguration(sql.NotPredicates(p))
}
