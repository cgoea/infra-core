// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/localaccountresource"
)

// LocalAccountResourceCreate is the builder for creating a LocalAccountResource entity.
type LocalAccountResourceCreate struct {
	config
	mutation *LocalAccountResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (larc *LocalAccountResourceCreate) SetResourceID(s string) *LocalAccountResourceCreate {
	larc.mutation.SetResourceID(s)
	return larc
}

// SetUsername sets the "username" field.
func (larc *LocalAccountResourceCreate) SetUsername(s string) *LocalAccountResourceCreate {
	larc.mutation.SetUsername(s)
	return larc
}

// SetSSHKey sets the "ssh_key" field.
func (larc *LocalAccountResourceCreate) SetSSHKey(s string) *LocalAccountResourceCreate {
	larc.mutation.SetSSHKey(s)
	return larc
}

// SetTenantID sets the "tenant_id" field.
func (larc *LocalAccountResourceCreate) SetTenantID(s string) *LocalAccountResourceCreate {
	larc.mutation.SetTenantID(s)
	return larc
}

// SetCreatedAt sets the "created_at" field.
func (larc *LocalAccountResourceCreate) SetCreatedAt(s string) *LocalAccountResourceCreate {
	larc.mutation.SetCreatedAt(s)
	return larc
}

// SetUpdatedAt sets the "updated_at" field.
func (larc *LocalAccountResourceCreate) SetUpdatedAt(s string) *LocalAccountResourceCreate {
	larc.mutation.SetUpdatedAt(s)
	return larc
}

// Mutation returns the LocalAccountResourceMutation object of the builder.
func (larc *LocalAccountResourceCreate) Mutation() *LocalAccountResourceMutation {
	return larc.mutation
}

// Save creates the LocalAccountResource in the database.
func (larc *LocalAccountResourceCreate) Save(ctx context.Context) (*LocalAccountResource, error) {
	return withHooks(ctx, larc.sqlSave, larc.mutation, larc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (larc *LocalAccountResourceCreate) SaveX(ctx context.Context) *LocalAccountResource {
	v, err := larc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (larc *LocalAccountResourceCreate) Exec(ctx context.Context) error {
	_, err := larc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (larc *LocalAccountResourceCreate) ExecX(ctx context.Context) {
	if err := larc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (larc *LocalAccountResourceCreate) check() error {
	if _, ok := larc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "LocalAccountResource.resource_id"`)}
	}
	if _, ok := larc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "LocalAccountResource.username"`)}
	}
	if _, ok := larc.mutation.SSHKey(); !ok {
		return &ValidationError{Name: "ssh_key", err: errors.New(`ent: missing required field "LocalAccountResource.ssh_key"`)}
	}
	if _, ok := larc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "LocalAccountResource.tenant_id"`)}
	}
	if _, ok := larc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LocalAccountResource.created_at"`)}
	}
	if _, ok := larc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LocalAccountResource.updated_at"`)}
	}
	return nil
}

func (larc *LocalAccountResourceCreate) sqlSave(ctx context.Context) (*LocalAccountResource, error) {
	if err := larc.check(); err != nil {
		return nil, err
	}
	_node, _spec := larc.createSpec()
	if err := sqlgraph.CreateNode(ctx, larc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	larc.mutation.id = &_node.ID
	larc.mutation.done = true
	return _node, nil
}

func (larc *LocalAccountResourceCreate) createSpec() (*LocalAccountResource, *sqlgraph.CreateSpec) {
	var (
		_node = &LocalAccountResource{config: larc.config}
		_spec = sqlgraph.NewCreateSpec(localaccountresource.Table, sqlgraph.NewFieldSpec(localaccountresource.FieldID, field.TypeInt))
	)
	if value, ok := larc.mutation.ResourceID(); ok {
		_spec.SetField(localaccountresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := larc.mutation.Username(); ok {
		_spec.SetField(localaccountresource.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := larc.mutation.SSHKey(); ok {
		_spec.SetField(localaccountresource.FieldSSHKey, field.TypeString, value)
		_node.SSHKey = value
	}
	if value, ok := larc.mutation.TenantID(); ok {
		_spec.SetField(localaccountresource.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := larc.mutation.CreatedAt(); ok {
		_spec.SetField(localaccountresource.FieldCreatedAt, field.TypeString, value)
		_node.CreatedAt = value
	}
	if value, ok := larc.mutation.UpdatedAt(); ok {
		_spec.SetField(localaccountresource.FieldUpdatedAt, field.TypeString, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// LocalAccountResourceCreateBulk is the builder for creating many LocalAccountResource entities in bulk.
type LocalAccountResourceCreateBulk struct {
	config
	err      error
	builders []*LocalAccountResourceCreate
}

// Save creates the LocalAccountResource entities in the database.
func (larcb *LocalAccountResourceCreateBulk) Save(ctx context.Context) ([]*LocalAccountResource, error) {
	if larcb.err != nil {
		return nil, larcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(larcb.builders))
	nodes := make([]*LocalAccountResource, len(larcb.builders))
	mutators := make([]Mutator, len(larcb.builders))
	for i := range larcb.builders {
		func(i int, root context.Context) {
			builder := larcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LocalAccountResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, larcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, larcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, larcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (larcb *LocalAccountResourceCreateBulk) SaveX(ctx context.Context) []*LocalAccountResource {
	v, err := larcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (larcb *LocalAccountResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := larcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (larcb *LocalAccountResourceCreateBulk) ExecX(ctx context.Context) {
	if err := larcb.Exec(ctx); err != nil {
		panic(err)
	}
}
