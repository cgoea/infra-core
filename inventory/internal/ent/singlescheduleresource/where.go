// Code generated by ent, DO NOT EDIT.

package singlescheduleresource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLTE(FieldID, id))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldResourceID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldName, v))
}

// StartSeconds applies equality check predicate on the "start_seconds" field. It's identical to StartSecondsEQ.
func StartSeconds(v uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldStartSeconds, v))
}

// EndSeconds applies equality check predicate on the "end_seconds" field. It's identical to EndSecondsEQ.
func EndSeconds(v uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldEndSeconds, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldUpdatedAt, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldContainsFold(FieldResourceID, v))
}

// ScheduleStatusEQ applies the EQ predicate on the "schedule_status" field.
func ScheduleStatusEQ(v ScheduleStatus) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldScheduleStatus, v))
}

// ScheduleStatusNEQ applies the NEQ predicate on the "schedule_status" field.
func ScheduleStatusNEQ(v ScheduleStatus) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNEQ(FieldScheduleStatus, v))
}

// ScheduleStatusIn applies the In predicate on the "schedule_status" field.
func ScheduleStatusIn(vs ...ScheduleStatus) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldIn(FieldScheduleStatus, vs...))
}

// ScheduleStatusNotIn applies the NotIn predicate on the "schedule_status" field.
func ScheduleStatusNotIn(vs ...ScheduleStatus) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNotIn(FieldScheduleStatus, vs...))
}

// ScheduleStatusIsNil applies the IsNil predicate on the "schedule_status" field.
func ScheduleStatusIsNil() predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldIsNull(FieldScheduleStatus))
}

// ScheduleStatusNotNil applies the NotNil predicate on the "schedule_status" field.
func ScheduleStatusNotNil() predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNotNull(FieldScheduleStatus))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldContainsFold(FieldName, v))
}

// StartSecondsEQ applies the EQ predicate on the "start_seconds" field.
func StartSecondsEQ(v uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldStartSeconds, v))
}

// StartSecondsNEQ applies the NEQ predicate on the "start_seconds" field.
func StartSecondsNEQ(v uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNEQ(FieldStartSeconds, v))
}

// StartSecondsIn applies the In predicate on the "start_seconds" field.
func StartSecondsIn(vs ...uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldIn(FieldStartSeconds, vs...))
}

// StartSecondsNotIn applies the NotIn predicate on the "start_seconds" field.
func StartSecondsNotIn(vs ...uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNotIn(FieldStartSeconds, vs...))
}

// StartSecondsGT applies the GT predicate on the "start_seconds" field.
func StartSecondsGT(v uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGT(FieldStartSeconds, v))
}

// StartSecondsGTE applies the GTE predicate on the "start_seconds" field.
func StartSecondsGTE(v uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGTE(FieldStartSeconds, v))
}

// StartSecondsLT applies the LT predicate on the "start_seconds" field.
func StartSecondsLT(v uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLT(FieldStartSeconds, v))
}

// StartSecondsLTE applies the LTE predicate on the "start_seconds" field.
func StartSecondsLTE(v uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLTE(FieldStartSeconds, v))
}

// EndSecondsEQ applies the EQ predicate on the "end_seconds" field.
func EndSecondsEQ(v uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldEndSeconds, v))
}

// EndSecondsNEQ applies the NEQ predicate on the "end_seconds" field.
func EndSecondsNEQ(v uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNEQ(FieldEndSeconds, v))
}

// EndSecondsIn applies the In predicate on the "end_seconds" field.
func EndSecondsIn(vs ...uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldIn(FieldEndSeconds, vs...))
}

// EndSecondsNotIn applies the NotIn predicate on the "end_seconds" field.
func EndSecondsNotIn(vs ...uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNotIn(FieldEndSeconds, vs...))
}

// EndSecondsGT applies the GT predicate on the "end_seconds" field.
func EndSecondsGT(v uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGT(FieldEndSeconds, v))
}

// EndSecondsGTE applies the GTE predicate on the "end_seconds" field.
func EndSecondsGTE(v uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGTE(FieldEndSeconds, v))
}

// EndSecondsLT applies the LT predicate on the "end_seconds" field.
func EndSecondsLT(v uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLT(FieldEndSeconds, v))
}

// EndSecondsLTE applies the LTE predicate on the "end_seconds" field.
func EndSecondsLTE(v uint64) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLTE(FieldEndSeconds, v))
}

// EndSecondsIsNil applies the IsNil predicate on the "end_seconds" field.
func EndSecondsIsNil() predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldIsNull(FieldEndSeconds))
}

// EndSecondsNotNil applies the NotNil predicate on the "end_seconds" field.
func EndSecondsNotNil() predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNotNull(FieldEndSeconds))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldContainsFold(FieldTenantID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtContains applies the Contains predicate on the "created_at" field.
func CreatedAtContains(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldContains(FieldCreatedAt, v))
}

// CreatedAtHasPrefix applies the HasPrefix predicate on the "created_at" field.
func CreatedAtHasPrefix(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldHasPrefix(FieldCreatedAt, v))
}

// CreatedAtHasSuffix applies the HasSuffix predicate on the "created_at" field.
func CreatedAtHasSuffix(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldHasSuffix(FieldCreatedAt, v))
}

// CreatedAtEqualFold applies the EqualFold predicate on the "created_at" field.
func CreatedAtEqualFold(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEqualFold(FieldCreatedAt, v))
}

// CreatedAtContainsFold applies the ContainsFold predicate on the "created_at" field.
func CreatedAtContainsFold(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldContainsFold(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtContains applies the Contains predicate on the "updated_at" field.
func UpdatedAtContains(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldContains(FieldUpdatedAt, v))
}

// UpdatedAtHasPrefix applies the HasPrefix predicate on the "updated_at" field.
func UpdatedAtHasPrefix(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldHasPrefix(FieldUpdatedAt, v))
}

// UpdatedAtHasSuffix applies the HasSuffix predicate on the "updated_at" field.
func UpdatedAtHasSuffix(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldHasSuffix(FieldUpdatedAt, v))
}

// UpdatedAtEqualFold applies the EqualFold predicate on the "updated_at" field.
func UpdatedAtEqualFold(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldEqualFold(FieldUpdatedAt, v))
}

// UpdatedAtContainsFold applies the ContainsFold predicate on the "updated_at" field.
func UpdatedAtContainsFold(v string) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.FieldContainsFold(FieldUpdatedAt, v))
}

// HasTargetSite applies the HasEdge predicate on the "target_site" edge.
func HasTargetSite() predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TargetSiteTable, TargetSiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetSiteWith applies the HasEdge predicate on the "target_site" edge with a given conditions (other predicates).
func HasTargetSiteWith(preds ...predicate.SiteResource) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(func(s *sql.Selector) {
		step := newTargetSiteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargetHost applies the HasEdge predicate on the "target_host" edge.
func HasTargetHost() predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TargetHostTable, TargetHostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetHostWith applies the HasEdge predicate on the "target_host" edge with a given conditions (other predicates).
func HasTargetHostWith(preds ...predicate.HostResource) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(func(s *sql.Selector) {
		step := newTargetHostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargetWorkload applies the HasEdge predicate on the "target_workload" edge.
func HasTargetWorkload() predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TargetWorkloadTable, TargetWorkloadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetWorkloadWith applies the HasEdge predicate on the "target_workload" edge with a given conditions (other predicates).
func HasTargetWorkloadWith(preds ...predicate.WorkloadResource) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(func(s *sql.Selector) {
		step := newTargetWorkloadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargetRegion applies the HasEdge predicate on the "target_region" edge.
func HasTargetRegion() predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TargetRegionTable, TargetRegionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetRegionWith applies the HasEdge predicate on the "target_region" edge with a given conditions (other predicates).
func HasTargetRegionWith(preds ...predicate.RegionResource) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(func(s *sql.Selector) {
		step := newTargetRegionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SingleScheduleResource) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SingleScheduleResource) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SingleScheduleResource) predicate.SingleScheduleResource {
	return predicate.SingleScheduleResource(sql.NotPredicates(p))
}
