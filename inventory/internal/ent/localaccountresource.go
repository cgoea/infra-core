// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/localaccountresource"
)

// LocalAccountResource is the model entity for the LocalAccountResource schema.
type LocalAccountResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// SSHKey holds the value of the "ssh_key" field.
	SSHKey string `json:"ssh_key,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    string `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LocalAccountResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case localaccountresource.FieldID:
			values[i] = new(sql.NullInt64)
		case localaccountresource.FieldResourceID, localaccountresource.FieldUsername, localaccountresource.FieldSSHKey, localaccountresource.FieldTenantID, localaccountresource.FieldCreatedAt, localaccountresource.FieldUpdatedAt:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LocalAccountResource fields.
func (lar *LocalAccountResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case localaccountresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lar.ID = int(value.Int64)
		case localaccountresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				lar.ResourceID = value.String
			}
		case localaccountresource.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				lar.Username = value.String
			}
		case localaccountresource.FieldSSHKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ssh_key", values[i])
			} else if value.Valid {
				lar.SSHKey = value.String
			}
		case localaccountresource.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				lar.TenantID = value.String
			}
		case localaccountresource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lar.CreatedAt = value.String
			}
		case localaccountresource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lar.UpdatedAt = value.String
			}
		default:
			lar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LocalAccountResource.
// This includes values selected through modifiers, order, etc.
func (lar *LocalAccountResource) Value(name string) (ent.Value, error) {
	return lar.selectValues.Get(name)
}

// Update returns a builder for updating this LocalAccountResource.
// Note that you need to call LocalAccountResource.Unwrap() before calling this method if this LocalAccountResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (lar *LocalAccountResource) Update() *LocalAccountResourceUpdateOne {
	return NewLocalAccountResourceClient(lar.config).UpdateOne(lar)
}

// Unwrap unwraps the LocalAccountResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lar *LocalAccountResource) Unwrap() *LocalAccountResource {
	_tx, ok := lar.config.driver.(*txDriver)
	if !ok {
		panic("ent: LocalAccountResource is not a transactional entity")
	}
	lar.config.driver = _tx.drv
	return lar
}

// String implements the fmt.Stringer.
func (lar *LocalAccountResource) String() string {
	var builder strings.Builder
	builder.WriteString("LocalAccountResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lar.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(lar.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(lar.Username)
	builder.WriteString(", ")
	builder.WriteString("ssh_key=")
	builder.WriteString(lar.SSHKey)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(lar.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lar.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lar.UpdatedAt)
	builder.WriteByte(')')
	return builder.String()
}

// LocalAccountResources is a parsable slice of LocalAccountResource.
type LocalAccountResources []*LocalAccountResource
