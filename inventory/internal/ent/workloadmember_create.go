// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadmember"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadresource"
)

// WorkloadMemberCreate is the builder for creating a WorkloadMember entity.
type WorkloadMemberCreate struct {
	config
	mutation *WorkloadMemberMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (wmc *WorkloadMemberCreate) SetResourceID(s string) *WorkloadMemberCreate {
	wmc.mutation.SetResourceID(s)
	return wmc
}

// SetKind sets the "kind" field.
func (wmc *WorkloadMemberCreate) SetKind(w workloadmember.Kind) *WorkloadMemberCreate {
	wmc.mutation.SetKind(w)
	return wmc
}

// SetTenantID sets the "tenant_id" field.
func (wmc *WorkloadMemberCreate) SetTenantID(s string) *WorkloadMemberCreate {
	wmc.mutation.SetTenantID(s)
	return wmc
}

// SetCreatedAt sets the "created_at" field.
func (wmc *WorkloadMemberCreate) SetCreatedAt(s string) *WorkloadMemberCreate {
	wmc.mutation.SetCreatedAt(s)
	return wmc
}

// SetUpdatedAt sets the "updated_at" field.
func (wmc *WorkloadMemberCreate) SetUpdatedAt(s string) *WorkloadMemberCreate {
	wmc.mutation.SetUpdatedAt(s)
	return wmc
}

// SetWorkloadID sets the "workload" edge to the WorkloadResource entity by ID.
func (wmc *WorkloadMemberCreate) SetWorkloadID(id int) *WorkloadMemberCreate {
	wmc.mutation.SetWorkloadID(id)
	return wmc
}

// SetWorkload sets the "workload" edge to the WorkloadResource entity.
func (wmc *WorkloadMemberCreate) SetWorkload(w *WorkloadResource) *WorkloadMemberCreate {
	return wmc.SetWorkloadID(w.ID)
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (wmc *WorkloadMemberCreate) SetInstanceID(id int) *WorkloadMemberCreate {
	wmc.mutation.SetInstanceID(id)
	return wmc
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (wmc *WorkloadMemberCreate) SetInstance(i *InstanceResource) *WorkloadMemberCreate {
	return wmc.SetInstanceID(i.ID)
}

// Mutation returns the WorkloadMemberMutation object of the builder.
func (wmc *WorkloadMemberCreate) Mutation() *WorkloadMemberMutation {
	return wmc.mutation
}

// Save creates the WorkloadMember in the database.
func (wmc *WorkloadMemberCreate) Save(ctx context.Context) (*WorkloadMember, error) {
	return withHooks(ctx, wmc.sqlSave, wmc.mutation, wmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wmc *WorkloadMemberCreate) SaveX(ctx context.Context) *WorkloadMember {
	v, err := wmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wmc *WorkloadMemberCreate) Exec(ctx context.Context) error {
	_, err := wmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wmc *WorkloadMemberCreate) ExecX(ctx context.Context) {
	if err := wmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wmc *WorkloadMemberCreate) check() error {
	if _, ok := wmc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "WorkloadMember.resource_id"`)}
	}
	if _, ok := wmc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "WorkloadMember.kind"`)}
	}
	if v, ok := wmc.mutation.Kind(); ok {
		if err := workloadmember.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "WorkloadMember.kind": %w`, err)}
		}
	}
	if _, ok := wmc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "WorkloadMember.tenant_id"`)}
	}
	if _, ok := wmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkloadMember.created_at"`)}
	}
	if _, ok := wmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkloadMember.updated_at"`)}
	}
	if len(wmc.mutation.WorkloadIDs()) == 0 {
		return &ValidationError{Name: "workload", err: errors.New(`ent: missing required edge "WorkloadMember.workload"`)}
	}
	if len(wmc.mutation.InstanceIDs()) == 0 {
		return &ValidationError{Name: "instance", err: errors.New(`ent: missing required edge "WorkloadMember.instance"`)}
	}
	return nil
}

func (wmc *WorkloadMemberCreate) sqlSave(ctx context.Context) (*WorkloadMember, error) {
	if err := wmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wmc.mutation.id = &_node.ID
	wmc.mutation.done = true
	return _node, nil
}

func (wmc *WorkloadMemberCreate) createSpec() (*WorkloadMember, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkloadMember{config: wmc.config}
		_spec = sqlgraph.NewCreateSpec(workloadmember.Table, sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt))
	)
	if value, ok := wmc.mutation.ResourceID(); ok {
		_spec.SetField(workloadmember.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := wmc.mutation.Kind(); ok {
		_spec.SetField(workloadmember.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := wmc.mutation.TenantID(); ok {
		_spec.SetField(workloadmember.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := wmc.mutation.CreatedAt(); ok {
		_spec.SetField(workloadmember.FieldCreatedAt, field.TypeString, value)
		_node.CreatedAt = value
	}
	if value, ok := wmc.mutation.UpdatedAt(); ok {
		_spec.SetField(workloadmember.FieldUpdatedAt, field.TypeString, value)
		_node.UpdatedAt = value
	}
	if nodes := wmc.mutation.WorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workloadmember.WorkloadTable,
			Columns: []string{workloadmember.WorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workload_member_workload = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wmc.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workloadmember.InstanceTable,
			Columns: []string{workloadmember.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workload_member_instance = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkloadMemberCreateBulk is the builder for creating many WorkloadMember entities in bulk.
type WorkloadMemberCreateBulk struct {
	config
	err      error
	builders []*WorkloadMemberCreate
}

// Save creates the WorkloadMember entities in the database.
func (wmcb *WorkloadMemberCreateBulk) Save(ctx context.Context) ([]*WorkloadMember, error) {
	if wmcb.err != nil {
		return nil, wmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wmcb.builders))
	nodes := make([]*WorkloadMember, len(wmcb.builders))
	mutators := make([]Mutator, len(wmcb.builders))
	for i := range wmcb.builders {
		func(i int, root context.Context) {
			builder := wmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkloadMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wmcb *WorkloadMemberCreateBulk) SaveX(ctx context.Context) []*WorkloadMember {
	v, err := wmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wmcb *WorkloadMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := wmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wmcb *WorkloadMemberCreateBulk) ExecX(ctx context.Context) {
	if err := wmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
