// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-filters, DO NOT EDIT.

package store

import (
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	inv_v1 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/inventory/v1"
)

func (r *registry) RegisterHostResource() {
	r.Register(
		newResourceTranspiler(
			inv_v1.ResourceKind_RESOURCE_KIND_HOST,
			hostresource.ValidColumn,
			map[string]edgeHandler{
				hostresource.EdgeHostGpus: {
					func(p sqlPredicate) sqlPredicate { return hostresource.HasHostGpusWith(p) },
					inv_v1.ResourceKind_RESOURCE_KIND_HOSTGPU,
				},

				hostresource.EdgeHostNics: {
					func(p sqlPredicate) sqlPredicate { return hostresource.HasHostNicsWith(p) },
					inv_v1.ResourceKind_RESOURCE_KIND_HOSTNIC,
				},

				hostresource.EdgeHostStorages: {
					func(p sqlPredicate) sqlPredicate { return hostresource.HasHostStoragesWith(p) },
					inv_v1.ResourceKind_RESOURCE_KIND_HOSTSTORAGE,
				},

				hostresource.EdgeHostUsbs: {
					func(p sqlPredicate) sqlPredicate { return hostresource.HasHostUsbsWith(p) },
					inv_v1.ResourceKind_RESOURCE_KIND_HOSTUSB,
				},

				hostresource.EdgeInstance: {
					func(p sqlPredicate) sqlPredicate { return hostresource.HasInstanceWith(p) },
					inv_v1.ResourceKind_RESOURCE_KIND_INSTANCE,
				},

				hostresource.EdgeProvider: {
					func(p sqlPredicate) sqlPredicate { return hostresource.HasProviderWith(p) },
					inv_v1.ResourceKind_RESOURCE_KIND_PROVIDER,
				},

				hostresource.EdgeSite: {
					func(p sqlPredicate) sqlPredicate { return hostresource.HasSiteWith(p) },
					inv_v1.ResourceKind_RESOURCE_KIND_SITE,
				},
			},
			map[string]sqlPredicate{
				hostresource.EdgeHostGpus:     hostresource.HasHostGpus(),
				hostresource.EdgeHostNics:     hostresource.HasHostNics(),
				hostresource.EdgeHostStorages: hostresource.HasHostStorages(),
				hostresource.EdgeHostUsbs:     hostresource.HasHostUsbs(),
				hostresource.EdgeInstance:     hostresource.HasInstance(),
				hostresource.EdgeProvider:     hostresource.HasProvider(),
				hostresource.EdgeSite:         hostresource.HasSite(),
			},
		))

}
