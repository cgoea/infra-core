// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /OSResources)
	GetOSResources(ctx echo.Context, params GetOSResourcesParams) error

	// (POST /OSResources)
	PostOSResources(ctx echo.Context) error

	// (DELETE /OSResources/{OSResourceID})
	DeleteOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (GET /OSResources/{OSResourceID})
	GetOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (PATCH /OSResources/{OSResourceID})
	PatchOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (PUT /OSResources/{OSResourceID})
	PutOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (GET /compute)
	GetCompute(ctx echo.Context, params GetComputeParams) error

	// (GET /compute/hosts)
	GetComputeHosts(ctx echo.Context, params GetComputeHostsParams) error

	// (POST /compute/hosts)
	PostComputeHosts(ctx echo.Context) error

	// (POST /compute/hosts/register)
	PostComputeHostsRegister(ctx echo.Context) error

	// (GET /compute/hosts/summary)
	GetComputeHostsSummary(ctx echo.Context, params GetComputeHostsSummaryParams) error

	// (DELETE /compute/hosts/{hostID})
	DeleteComputeHostsHostID(ctx echo.Context, hostID string) error

	// (GET /compute/hosts/{hostID})
	GetComputeHostsHostID(ctx echo.Context, hostID string) error

	// (PATCH /compute/hosts/{hostID})
	PatchComputeHostsHostID(ctx echo.Context, hostID string) error

	// (PUT /compute/hosts/{hostID})
	PutComputeHostsHostID(ctx echo.Context, hostID string) error

	// (PUT /compute/hosts/{hostID}/invalidate)
	PutComputeHostsHostIDInvalidate(ctx echo.Context, hostID string) error

	// (PATCH /compute/hosts/{hostID}/onboard)
	PatchComputeHostsHostIDOnboard(ctx echo.Context, hostID string) error

	// (PATCH /compute/hosts/{hostID}/register)
	PatchComputeHostsHostIDRegister(ctx echo.Context, hostID string) error

	// (GET /instances)
	GetInstances(ctx echo.Context, params GetInstancesParams) error

	// (POST /instances)
	PostInstances(ctx echo.Context) error

	// (DELETE /instances/{instanceID})
	DeleteInstancesInstanceID(ctx echo.Context, instanceID string) error

	// (GET /instances/{instanceID})
	GetInstancesInstanceID(ctx echo.Context, instanceID string) error

	// (PATCH /instances/{instanceID})
	PatchInstancesInstanceID(ctx echo.Context, instanceID string) error

	// (PUT /instances/{instanceID}/invalidate)
	PutInstancesInstanceIDInvalidate(ctx echo.Context, instanceID string) error

	// (GET /localAccounts)
	GetLocalAccounts(ctx echo.Context, params GetLocalAccountsParams) error

	// (POST /localAccounts)
	PostLocalAccounts(ctx echo.Context) error

	// (DELETE /localAccounts/{localAccountID})
	DeleteLocalAccountsLocalAccountID(ctx echo.Context, localAccountID string) error

	// (GET /localAccounts/{localAccountID})
	GetLocalAccountsLocalAccountID(ctx echo.Context, localAccountID string) error

	// (GET /locations)
	GetLocations(ctx echo.Context, params GetLocationsParams) error

	// (GET /ous)
	GetOus(ctx echo.Context, params GetOusParams) error

	// (POST /ous)
	PostOus(ctx echo.Context) error

	// (DELETE /ous/{ouID})
	DeleteOusOuID(ctx echo.Context, ouid string) error

	// (GET /ous/{ouID})
	GetOusOuID(ctx echo.Context, ouid string) error

	// (PATCH /ous/{ouID})
	PatchOusOuID(ctx echo.Context, ouid string) error

	// (PUT /ous/{ouID})
	PutOusOuID(ctx echo.Context, ouid string) error

	// (GET /providers)
	GetProviders(ctx echo.Context, params GetProvidersParams) error

	// (POST /providers)
	PostProviders(ctx echo.Context) error

	// (DELETE /providers/{providerID})
	DeleteProvidersProviderID(ctx echo.Context, providerID string) error

	// (GET /providers/{providerID})
	GetProvidersProviderID(ctx echo.Context, providerID string) error

	// (GET /regions)
	GetRegions(ctx echo.Context, params GetRegionsParams) error

	// (POST /regions)
	PostRegions(ctx echo.Context) error

	// (DELETE /regions/{regionID})
	DeleteRegionsRegionID(ctx echo.Context, regionID string) error

	// (GET /regions/{regionID})
	GetRegionsRegionID(ctx echo.Context, regionID string) error

	// (PATCH /regions/{regionID})
	PatchRegionsRegionID(ctx echo.Context, regionID string) error

	// (PUT /regions/{regionID})
	PutRegionsRegionID(ctx echo.Context, regionID string) error

	// (GET /schedules)
	GetSchedules(ctx echo.Context, params GetSchedulesParams) error

	// (GET /schedules/repeated)
	GetSchedulesRepeated(ctx echo.Context, params GetSchedulesRepeatedParams) error

	// (POST /schedules/repeated)
	PostSchedulesRepeated(ctx echo.Context) error

	// (DELETE /schedules/repeated/{repeatedScheduleID})
	DeleteSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (GET /schedules/repeated/{repeatedScheduleID})
	GetSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (PATCH /schedules/repeated/{repeatedScheduleID})
	PatchSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (PUT /schedules/repeated/{repeatedScheduleID})
	PutSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (GET /schedules/single)
	GetSchedulesSingle(ctx echo.Context, params GetSchedulesSingleParams) error

	// (POST /schedules/single)
	PostSchedulesSingle(ctx echo.Context) error

	// (DELETE /schedules/single/{singleScheduleID})
	DeleteSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (GET /schedules/single/{singleScheduleID})
	GetSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (PATCH /schedules/single/{singleScheduleID})
	PatchSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (PUT /schedules/single/{singleScheduleID})
	PutSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (GET /sites)
	GetSites(ctx echo.Context, params GetSitesParams) error

	// (POST /sites)
	PostSites(ctx echo.Context) error

	// (DELETE /sites/{siteID})
	DeleteSitesSiteID(ctx echo.Context, siteID string) error

	// (GET /sites/{siteID})
	GetSitesSiteID(ctx echo.Context, siteID string) error

	// (PATCH /sites/{siteID})
	PatchSitesSiteID(ctx echo.Context, siteID string) error

	// (PUT /sites/{siteID})
	PutSitesSiteID(ctx echo.Context, siteID string) error

	// (GET /telemetry/groups/logs)
	GetTelemetryGroupsLogs(ctx echo.Context, params GetTelemetryGroupsLogsParams) error

	// (POST /telemetry/groups/logs)
	PostTelemetryGroupsLogs(ctx echo.Context) error

	// (DELETE /telemetry/groups/logs/{telemetryLogsGroupId})
	DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context, telemetryLogsGroupId string) error

	// (GET /telemetry/groups/logs/{telemetryLogsGroupId})
	GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context, telemetryLogsGroupId string) error

	// (GET /telemetry/groups/metrics)
	GetTelemetryGroupsMetrics(ctx echo.Context, params GetTelemetryGroupsMetricsParams) error

	// (POST /telemetry/groups/metrics)
	PostTelemetryGroupsMetrics(ctx echo.Context) error

	// (DELETE /telemetry/groups/metrics/{telemetryMetricsGroupId})
	DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context, telemetryMetricsGroupId string) error

	// (GET /telemetry/groups/metrics/{telemetryMetricsGroupId})
	GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context, telemetryMetricsGroupId string) error

	// (GET /telemetry/profiles/logs)
	GetTelemetryProfilesLogs(ctx echo.Context, params GetTelemetryProfilesLogsParams) error

	// (POST /telemetry/profiles/logs)
	PostTelemetryProfilesLogs(ctx echo.Context) error

	// (DELETE /telemetry/profiles/logs/{telemetryLogsProfileId})
	DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (GET /telemetry/profiles/logs/{telemetryLogsProfileId})
	GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (PATCH /telemetry/profiles/logs/{telemetryLogsProfileId})
	PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (PUT /telemetry/profiles/logs/{telemetryLogsProfileId})
	PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (GET /telemetry/profiles/metrics)
	GetTelemetryProfilesMetrics(ctx echo.Context, params GetTelemetryProfilesMetricsParams) error

	// (POST /telemetry/profiles/metrics)
	PostTelemetryProfilesMetrics(ctx echo.Context) error

	// (DELETE /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (GET /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (PATCH /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (PUT /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (GET /workloadMembers)
	GetWorkloadMembers(ctx echo.Context, params GetWorkloadMembersParams) error

	// (POST /workloadMembers)
	PostWorkloadMembers(ctx echo.Context) error

	// (DELETE /workloadMembers/{workloadMemberID})
	DeleteWorkloadMembersWorkloadMemberID(ctx echo.Context, workloadMemberID string) error

	// (GET /workloadMembers/{workloadMemberID})
	GetWorkloadMembersWorkloadMemberID(ctx echo.Context, workloadMemberID string) error

	// (GET /workloads)
	GetWorkloads(ctx echo.Context, params GetWorkloadsParams) error

	// (POST /workloads)
	PostWorkloads(ctx echo.Context) error

	// (DELETE /workloads/{workloadID})
	DeleteWorkloadsWorkloadID(ctx echo.Context, workloadID string) error

	// (GET /workloads/{workloadID})
	GetWorkloadsWorkloadID(ctx echo.Context, workloadID string) error

	// (PATCH /workloads/{workloadID})
	PatchWorkloadsWorkloadID(ctx echo.Context, workloadID string) error

	// (PUT /workloads/{workloadID})
	PutWorkloadsWorkloadID(ctx echo.Context, workloadID string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetOSResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetOSResources(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOSResourcesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOSResources(ctx, params)
	return err
}

// PostOSResources converts echo context to params.
func (w *ServerInterfaceWrapper) PostOSResources(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostOSResources(ctx)
	return err
}

// DeleteOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// GetOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) GetOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// PatchOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// PutOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) PutOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// GetCompute converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompute(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComputeParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "instanceID" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceID", ctx.QueryParams(), &params.InstanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// ------------- Optional query parameter "metadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "metadata", ctx.QueryParams(), &params.Metadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metadata: %s", err))
	}

	// ------------- Optional query parameter "detail" -------------

	err = runtime.BindQueryParameter("form", true, false, "detail", ctx.QueryParams(), &params.Detail)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter detail: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompute(ctx, params)
	return err
}

// GetComputeHosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetComputeHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComputeHostsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "instanceID" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceID", ctx.QueryParams(), &params.InstanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// ------------- Optional query parameter "metadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "metadata", ctx.QueryParams(), &params.Metadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metadata: %s", err))
	}

	// ------------- Optional query parameter "detail" -------------

	err = runtime.BindQueryParameter("form", true, false, "detail", ctx.QueryParams(), &params.Detail)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter detail: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComputeHosts(ctx, params)
	return err
}

// PostComputeHosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostComputeHosts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostComputeHosts(ctx)
	return err
}

// PostComputeHostsRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostComputeHostsRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostComputeHostsRegister(ctx)
	return err
}

// GetComputeHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) GetComputeHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComputeHostsSummaryParams
	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComputeHostsSummary(ctx, params)
	return err
}

// DeleteComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteComputeHostsHostID(ctx, hostID)
	return err
}

// GetComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) GetComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComputeHostsHostID(ctx, hostID)
	return err
}

// PatchComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchComputeHostsHostID(ctx, hostID)
	return err
}

// PutComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) PutComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutComputeHostsHostID(ctx, hostID)
	return err
}

// PutComputeHostsHostIDInvalidate converts echo context to params.
func (w *ServerInterfaceWrapper) PutComputeHostsHostIDInvalidate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutComputeHostsHostIDInvalidate(ctx, hostID)
	return err
}

// PatchComputeHostsHostIDOnboard converts echo context to params.
func (w *ServerInterfaceWrapper) PatchComputeHostsHostIDOnboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchComputeHostsHostIDOnboard(ctx, hostID)
	return err
}

// PatchComputeHostsHostIDRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PatchComputeHostsHostIDRegister(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchComputeHostsHostIDRegister(ctx, hostID)
	return err
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "workloadMemberID" -------------

	err = runtime.BindQueryParameter("form", true, false, "workloadMemberID", ctx.QueryParams(), &params.WorkloadMemberID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadMemberID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstances converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstances(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstances(ctx)
	return err
}

// DeleteInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteInstancesInstanceID(ctx, instanceID)
	return err
}

// GetInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstancesInstanceID(ctx, instanceID)
	return err
}

// PatchInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchInstancesInstanceID(ctx, instanceID)
	return err
}

// PutInstancesInstanceIDInvalidate converts echo context to params.
func (w *ServerInterfaceWrapper) PutInstancesInstanceIDInvalidate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutInstancesInstanceIDInvalidate(ctx, instanceID)
	return err
}

// GetLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLocalAccountsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocalAccounts(ctx, params)
	return err
}

// PostLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) PostLocalAccounts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLocalAccounts(ctx)
	return err
}

// DeleteLocalAccountsLocalAccountID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLocalAccountsLocalAccountID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "localAccountID" -------------
	var localAccountID string

	err = runtime.BindStyledParameterWithOptions("simple", "localAccountID", ctx.Param("localAccountID"), &localAccountID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter localAccountID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLocalAccountsLocalAccountID(ctx, localAccountID)
	return err
}

// GetLocalAccountsLocalAccountID converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocalAccountsLocalAccountID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "localAccountID" -------------
	var localAccountID string

	err = runtime.BindStyledParameterWithOptions("simple", "localAccountID", ctx.Param("localAccountID"), &localAccountID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter localAccountID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocalAccountsLocalAccountID(ctx, localAccountID)
	return err
}

// GetLocations converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocations(ctx, params)
	return err
}

// GetOus converts echo context to params.
func (w *ServerInterfaceWrapper) GetOus(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOusParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "parent" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent", ctx.QueryParams(), &params.Parent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOus(ctx, params)
	return err
}

// PostOus converts echo context to params.
func (w *ServerInterfaceWrapper) PostOus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostOus(ctx)
	return err
}

// DeleteOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOusOuID(ctx, ouid)
	return err
}

// GetOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) GetOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOusOuID(ctx, ouid)
	return err
}

// PatchOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchOusOuID(ctx, ouid)
	return err
}

// PutOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) PutOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutOusOuID(ctx, ouid)
	return err
}

// GetProviders converts echo context to params.
func (w *ServerInterfaceWrapper) GetProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProvidersParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProviders(ctx, params)
	return err
}

// PostProviders converts echo context to params.
func (w *ServerInterfaceWrapper) PostProviders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProviders(ctx)
	return err
}

// DeleteProvidersProviderID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProvidersProviderID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "providerID" -------------
	var providerID string

	err = runtime.BindStyledParameterWithOptions("simple", "providerID", ctx.Param("providerID"), &providerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter providerID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProvidersProviderID(ctx, providerID)
	return err
}

// GetProvidersProviderID converts echo context to params.
func (w *ServerInterfaceWrapper) GetProvidersProviderID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "providerID" -------------
	var providerID string

	err = runtime.BindStyledParameterWithOptions("simple", "providerID", ctx.Param("providerID"), &providerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter providerID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProvidersProviderID(ctx, providerID)
	return err
}

// GetRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRegionsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "parent" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent", ctx.QueryParams(), &params.Parent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRegions(ctx, params)
	return err
}

// PostRegions converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRegions(ctx)
	return err
}

// DeleteRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRegionsRegionID(ctx, regionID)
	return err
}

// GetRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) GetRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRegionsRegionID(ctx, regionID)
	return err
}

// PatchRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchRegionsRegionID(ctx, regionID)
	return err
}

// PutRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) PutRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutRegionsRegionID(ctx, regionID)
	return err
}

// GetSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "unix_epoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unix_epoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unix_epoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedules(ctx, params)
	return err
}

// GetSchedulesRepeated converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesRepeated(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulesRepeatedParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "unix_epoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unix_epoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unix_epoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesRepeated(ctx, params)
	return err
}

// PostSchedulesRepeated converts echo context to params.
func (w *ServerInterfaceWrapper) PostSchedulesRepeated(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSchedulesRepeated(ctx)
	return err
}

// DeleteSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// GetSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// PatchSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// PutSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PutSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// GetSchedulesSingle converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesSingle(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulesSingleParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "unix_epoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unix_epoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unix_epoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesSingle(ctx, params)
	return err
}

// PostSchedulesSingle converts echo context to params.
func (w *ServerInterfaceWrapper) PostSchedulesSingle(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSchedulesSingle(ctx)
	return err
}

// DeleteSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// GetSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// PatchSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// PutSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PutSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// GetSites converts echo context to params.
func (w *ServerInterfaceWrapper) GetSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSitesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "ouID" -------------

	err = runtime.BindQueryParameter("form", true, false, "ouID", ctx.QueryParams(), &params.OuID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSites(ctx, params)
	return err
}

// PostSites converts echo context to params.
func (w *ServerInterfaceWrapper) PostSites(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSites(ctx)
	return err
}

// DeleteSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSitesSiteID(ctx, siteID)
	return err
}

// GetSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSitesSiteID(ctx, siteID)
	return err
}

// PatchSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSitesSiteID(ctx, siteID)
	return err
}

// PutSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) PutSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSitesSiteID(ctx, siteID)
	return err
}

// GetTelemetryGroupsLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsLogs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryGroupsLogsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsLogs(ctx, params)
	return err
}

// PostTelemetryGroupsLogs converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryGroupsLogs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryGroupsLogs(ctx)
	return err
}

// DeleteTelemetryGroupsLogsTelemetryLogsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsGroupId" -------------
	var telemetryLogsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsGroupId", ctx.Param("telemetryLogsGroupId"), &telemetryLogsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx, telemetryLogsGroupId)
	return err
}

// GetTelemetryGroupsLogsTelemetryLogsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsGroupId" -------------
	var telemetryLogsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsGroupId", ctx.Param("telemetryLogsGroupId"), &telemetryLogsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx, telemetryLogsGroupId)
	return err
}

// GetTelemetryGroupsMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsMetrics(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryGroupsMetricsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsMetrics(ctx, params)
	return err
}

// PostTelemetryGroupsMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryGroupsMetrics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryGroupsMetrics(ctx)
	return err
}

// DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsGroupId" -------------
	var telemetryMetricsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsGroupId", ctx.Param("telemetryMetricsGroupId"), &telemetryMetricsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx, telemetryMetricsGroupId)
	return err
}

// GetTelemetryGroupsMetricsTelemetryMetricsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsGroupId" -------------
	var telemetryMetricsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsGroupId", ctx.Param("telemetryMetricsGroupId"), &telemetryMetricsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx, telemetryMetricsGroupId)
	return err
}

// GetTelemetryProfilesLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesLogs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryProfilesLogsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesLogs(ctx, params)
	return err
}

// PostTelemetryProfilesLogs converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryProfilesLogs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryProfilesLogs(ctx)
	return err
}

// DeleteTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// GetTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// PatchTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// PutTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// GetTelemetryProfilesMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesMetrics(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryProfilesMetricsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesMetrics(ctx, params)
	return err
}

// PostTelemetryProfilesMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryProfilesMetrics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryProfilesMetrics(ctx)
	return err
}

// DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// GetTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// PatchTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// PutTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// GetWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkloadMembersParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "workload_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "workload_id", ctx.QueryParams(), &params.WorkloadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workload_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloadMembers(ctx, params)
	return err
}

// PostWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) PostWorkloadMembers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWorkloadMembers(ctx)
	return err
}

// DeleteWorkloadMembersWorkloadMemberID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkloadMembersWorkloadMemberID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadMemberID" -------------
	var workloadMemberID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadMemberID", ctx.Param("workloadMemberID"), &workloadMemberID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadMemberID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWorkloadMembersWorkloadMemberID(ctx, workloadMemberID)
	return err
}

// GetWorkloadMembersWorkloadMemberID converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloadMembersWorkloadMemberID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadMemberID" -------------
	var workloadMemberID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadMemberID", ctx.Param("workloadMemberID"), &workloadMemberID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadMemberID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloadMembersWorkloadMemberID(ctx, workloadMemberID)
	return err
}

// GetWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkloadsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", ctx.QueryParams(), &params.Kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloads(ctx, params)
	return err
}

// PostWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) PostWorkloads(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWorkloads(ctx)
	return err
}

// DeleteWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// GetWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// PatchWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// PutWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) PutWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/OSResources", wrapper.GetOSResources)
	router.POST(baseURL+"/OSResources", wrapper.PostOSResources)
	router.DELETE(baseURL+"/OSResources/:OSResourceID", wrapper.DeleteOSResourcesOSResourceID)
	router.GET(baseURL+"/OSResources/:OSResourceID", wrapper.GetOSResourcesOSResourceID)
	router.PATCH(baseURL+"/OSResources/:OSResourceID", wrapper.PatchOSResourcesOSResourceID)
	router.PUT(baseURL+"/OSResources/:OSResourceID", wrapper.PutOSResourcesOSResourceID)
	router.GET(baseURL+"/compute", wrapper.GetCompute)
	router.GET(baseURL+"/compute/hosts", wrapper.GetComputeHosts)
	router.POST(baseURL+"/compute/hosts", wrapper.PostComputeHosts)
	router.POST(baseURL+"/compute/hosts/register", wrapper.PostComputeHostsRegister)
	router.GET(baseURL+"/compute/hosts/summary", wrapper.GetComputeHostsSummary)
	router.DELETE(baseURL+"/compute/hosts/:hostID", wrapper.DeleteComputeHostsHostID)
	router.GET(baseURL+"/compute/hosts/:hostID", wrapper.GetComputeHostsHostID)
	router.PATCH(baseURL+"/compute/hosts/:hostID", wrapper.PatchComputeHostsHostID)
	router.PUT(baseURL+"/compute/hosts/:hostID", wrapper.PutComputeHostsHostID)
	router.PUT(baseURL+"/compute/hosts/:hostID/invalidate", wrapper.PutComputeHostsHostIDInvalidate)
	router.PATCH(baseURL+"/compute/hosts/:hostID/onboard", wrapper.PatchComputeHostsHostIDOnboard)
	router.PATCH(baseURL+"/compute/hosts/:hostID/register", wrapper.PatchComputeHostsHostIDRegister)
	router.GET(baseURL+"/instances", wrapper.GetInstances)
	router.POST(baseURL+"/instances", wrapper.PostInstances)
	router.DELETE(baseURL+"/instances/:instanceID", wrapper.DeleteInstancesInstanceID)
	router.GET(baseURL+"/instances/:instanceID", wrapper.GetInstancesInstanceID)
	router.PATCH(baseURL+"/instances/:instanceID", wrapper.PatchInstancesInstanceID)
	router.PUT(baseURL+"/instances/:instanceID/invalidate", wrapper.PutInstancesInstanceIDInvalidate)
	router.GET(baseURL+"/localAccounts", wrapper.GetLocalAccounts)
	router.POST(baseURL+"/localAccounts", wrapper.PostLocalAccounts)
	router.DELETE(baseURL+"/localAccounts/:localAccountID", wrapper.DeleteLocalAccountsLocalAccountID)
	router.GET(baseURL+"/localAccounts/:localAccountID", wrapper.GetLocalAccountsLocalAccountID)
	router.GET(baseURL+"/locations", wrapper.GetLocations)
	router.GET(baseURL+"/ous", wrapper.GetOus)
	router.POST(baseURL+"/ous", wrapper.PostOus)
	router.DELETE(baseURL+"/ous/:ouID", wrapper.DeleteOusOuID)
	router.GET(baseURL+"/ous/:ouID", wrapper.GetOusOuID)
	router.PATCH(baseURL+"/ous/:ouID", wrapper.PatchOusOuID)
	router.PUT(baseURL+"/ous/:ouID", wrapper.PutOusOuID)
	router.GET(baseURL+"/providers", wrapper.GetProviders)
	router.POST(baseURL+"/providers", wrapper.PostProviders)
	router.DELETE(baseURL+"/providers/:providerID", wrapper.DeleteProvidersProviderID)
	router.GET(baseURL+"/providers/:providerID", wrapper.GetProvidersProviderID)
	router.GET(baseURL+"/regions", wrapper.GetRegions)
	router.POST(baseURL+"/regions", wrapper.PostRegions)
	router.DELETE(baseURL+"/regions/:regionID", wrapper.DeleteRegionsRegionID)
	router.GET(baseURL+"/regions/:regionID", wrapper.GetRegionsRegionID)
	router.PATCH(baseURL+"/regions/:regionID", wrapper.PatchRegionsRegionID)
	router.PUT(baseURL+"/regions/:regionID", wrapper.PutRegionsRegionID)
	router.GET(baseURL+"/schedules", wrapper.GetSchedules)
	router.GET(baseURL+"/schedules/repeated", wrapper.GetSchedulesRepeated)
	router.POST(baseURL+"/schedules/repeated", wrapper.PostSchedulesRepeated)
	router.DELETE(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.DeleteSchedulesRepeatedRepeatedScheduleID)
	router.GET(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.GetSchedulesRepeatedRepeatedScheduleID)
	router.PATCH(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.PatchSchedulesRepeatedRepeatedScheduleID)
	router.PUT(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.PutSchedulesRepeatedRepeatedScheduleID)
	router.GET(baseURL+"/schedules/single", wrapper.GetSchedulesSingle)
	router.POST(baseURL+"/schedules/single", wrapper.PostSchedulesSingle)
	router.DELETE(baseURL+"/schedules/single/:singleScheduleID", wrapper.DeleteSchedulesSingleSingleScheduleID)
	router.GET(baseURL+"/schedules/single/:singleScheduleID", wrapper.GetSchedulesSingleSingleScheduleID)
	router.PATCH(baseURL+"/schedules/single/:singleScheduleID", wrapper.PatchSchedulesSingleSingleScheduleID)
	router.PUT(baseURL+"/schedules/single/:singleScheduleID", wrapper.PutSchedulesSingleSingleScheduleID)
	router.GET(baseURL+"/sites", wrapper.GetSites)
	router.POST(baseURL+"/sites", wrapper.PostSites)
	router.DELETE(baseURL+"/sites/:siteID", wrapper.DeleteSitesSiteID)
	router.GET(baseURL+"/sites/:siteID", wrapper.GetSitesSiteID)
	router.PATCH(baseURL+"/sites/:siteID", wrapper.PatchSitesSiteID)
	router.PUT(baseURL+"/sites/:siteID", wrapper.PutSitesSiteID)
	router.GET(baseURL+"/telemetry/groups/logs", wrapper.GetTelemetryGroupsLogs)
	router.POST(baseURL+"/telemetry/groups/logs", wrapper.PostTelemetryGroupsLogs)
	router.DELETE(baseURL+"/telemetry/groups/logs/:telemetryLogsGroupId", wrapper.DeleteTelemetryGroupsLogsTelemetryLogsGroupId)
	router.GET(baseURL+"/telemetry/groups/logs/:telemetryLogsGroupId", wrapper.GetTelemetryGroupsLogsTelemetryLogsGroupId)
	router.GET(baseURL+"/telemetry/groups/metrics", wrapper.GetTelemetryGroupsMetrics)
	router.POST(baseURL+"/telemetry/groups/metrics", wrapper.PostTelemetryGroupsMetrics)
	router.DELETE(baseURL+"/telemetry/groups/metrics/:telemetryMetricsGroupId", wrapper.DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId)
	router.GET(baseURL+"/telemetry/groups/metrics/:telemetryMetricsGroupId", wrapper.GetTelemetryGroupsMetricsTelemetryMetricsGroupId)
	router.GET(baseURL+"/telemetry/profiles/logs", wrapper.GetTelemetryProfilesLogs)
	router.POST(baseURL+"/telemetry/profiles/logs", wrapper.PostTelemetryProfilesLogs)
	router.DELETE(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.DeleteTelemetryProfilesLogsTelemetryLogsProfileId)
	router.GET(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.GetTelemetryProfilesLogsTelemetryLogsProfileId)
	router.PATCH(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.PatchTelemetryProfilesLogsTelemetryLogsProfileId)
	router.PUT(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.PutTelemetryProfilesLogsTelemetryLogsProfileId)
	router.GET(baseURL+"/telemetry/profiles/metrics", wrapper.GetTelemetryProfilesMetrics)
	router.POST(baseURL+"/telemetry/profiles/metrics", wrapper.PostTelemetryProfilesMetrics)
	router.DELETE(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.GET(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.GetTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.PATCH(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.PatchTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.PUT(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.PutTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.GET(baseURL+"/workloadMembers", wrapper.GetWorkloadMembers)
	router.POST(baseURL+"/workloadMembers", wrapper.PostWorkloadMembers)
	router.DELETE(baseURL+"/workloadMembers/:workloadMemberID", wrapper.DeleteWorkloadMembersWorkloadMemberID)
	router.GET(baseURL+"/workloadMembers/:workloadMemberID", wrapper.GetWorkloadMembersWorkloadMemberID)
	router.GET(baseURL+"/workloads", wrapper.GetWorkloads)
	router.POST(baseURL+"/workloads", wrapper.PostWorkloads)
	router.DELETE(baseURL+"/workloads/:workloadID", wrapper.DeleteWorkloadsWorkloadID)
	router.GET(baseURL+"/workloads/:workloadID", wrapper.GetWorkloadsWorkloadID)
	router.PATCH(baseURL+"/workloads/:workloadID", wrapper.PatchWorkloadsWorkloadID)
	router.PUT(baseURL+"/workloads/:workloadID", wrapper.PutWorkloadsWorkloadID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
